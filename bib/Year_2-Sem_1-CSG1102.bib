Automatically generated by Mendeley Desktop 1.14
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@techreport{Wilson1992,
author = {Wilson, Paul R},
booktitle = {Memory Management},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson/Uniprocessor Garbage Collection Techniques/Wilson - 1992 - Uniprocessor Garbage Collection Techniques.pdf:pdf},
pages = {1--42},
title = {{Uniprocessor Garbage Collection Techniques}},
year = {1992}
}
@misc{Micros,
author = {Microsoft},
title = {{Memory Management (Windows)}},
url = {https://msdn.microsoft.com/en-us/library/aa366779(VS.85).aspx},
urldate = {2015-07-31}
}
@misc{ShieldsHistoryOfOS,
author = {Shields, Dave},
title = {{A Brief History of Operating Systems | The Wayward Word Press on WordPress.com}},
url = {http://daveshields.me/presentations/a-brief-history-of-operating-systems/},
urldate = {2015-07-27}
}
@book{Tanendbaum2009,
abstract = {For software development professionals and computer science students, Modern Operating Systems gives a solid conceptual overview of operating system design, including detailed case studies of Unix/Linux and Windows 2000. Readers familiar with Tanenbaum's previous text, Operating Systems, know the author is a great proponent of simple design and hands-on experimentation. His earlier book came bundled with the source code for an operating system called Minux, a simple variant of Unix and the platform used by Linus Torvalds to develop Linux. Although this book does not come with any source code, he illustrates many of his points with code fragments (C, usually with Unix system calls). The first half of Modern Operating Systems focuses on traditional operating systems concepts: processes, deadlocks, memory management, I/O, and file systems. There is nothing ground-breaking in these early chapters, but all topics are well covered, each including sections on current research and a set of student problems. It is the second half of the book that differentiates itself from older operating systems texts. Here, each chapter describes an element of what constitutes a modern operating system-awareness of multimedia applications, multiple processors, computer networks, and a high level of security. The chapter on multimedia functionality focuses on such features as handling massive files and providing video-on-demand. Included in the discussion on multiprocessor platforms are clustered computers and distributed computing. Finally, the importance of security is discussed-a lively enumeration of the scores of ways operating systems can be vulnerable to attack, from password security to computer viruses and Internet worms. Included at the end of the book are case studies of two popular operating systems: Unix/Linux and Windows 2000. There is a bias toward the Unix/Linux approach, not surprising given the author's experience and academic bent, but this bias does not detract from Tanenbaum's analysis. Both operating systems are dissected, describing how each implements processes, file systems, memory management, and other operating system fundamentals. Tanenbaum's mantra is a simple, accessible operating system design. Given that modern operating systems have extensive features, he is forced to reconcile physical size with simplicity. Towards this end, he makes frequent references to the Frederick Brooks classic The Mythical Man Month for wisdom on managing large, complex software development projects. He finds both Windows 2000 and Unix/Linux guilty of being too complicated-with a particular skewering of Windows 2000 and its "mammoth Win32 API". A primary culprit is the attempt to make operating systems more "user-friendly," which Tanenbaum views as an excuse for bloated code. The solution is to have smart people, the smallest possible team, and well-defined interactions between various operating systems components. Future operating system design will benefit if the advice in this book is taken to heart. -Pete Ostenson - Dieser Text bezieht sich auf eine vergriffene oder nicht verf\"{u}gbare Ausgabe dieses Titels.},
archivePrefix = {arXiv},
arxivId = {0710.2023},
author = {Tanendbaum, Andrew S.},
doi = {10.1142/S0129183108012261},
edition = {3rd},
eprint = {0710.2023},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Tanendbaum/Modern Operating Systems/Tanendbaum - 2009 - Modern Operating Systems.pdf:pdf},
isbn = {0130313580},
issn = {13541013},
pages = {1104},
pmid = {12204814},
publisher = {Pearson Education},
title = {{Modern Operating Systems}},
url = {http://www.amazon.com/dp/0136006639},
year = {2009}
}
@misc{Bartlett2004,
author = {Bartlett, Jonathan},
booktitle = {IBM (16th November)},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Bartlett/Inside Memory Management The choices, tradeoffs, and implementations of dynamic allocation/Bartlett - 2004 - Inside Memory Management The choices, tradeoffs, and implementations of dynamic allocation.pdf:pdf},
pages = {1--23},
title = {{Inside Memory Management: The choices, tradeoffs, and implementations of dynamic allocation}},
url = {http://www.ibm.com/developerworks/linux/library/l-memory/},
urldate = {2015-07-31},
year = {2004}
}
@misc{CreationOfUnix,
title = {{The Creation of the UNIX Operating System: An Overview of the UNIX* Operating System}},
url = {http://web.archive.org/web/20070707183617/http://www.bell-labs.com/history/unix/tutorial.html},
urldate = {2015-07-27},
year = {2007}
}
@article{Wilson1992,
abstract = {Pointer swizzling at page fault time is a novel address translation mechanism that exploits conventional address translation hardware. It can support huge address spaces efficiently without long hardware addresses; such large address spaces are attractive for persistent object stores, distributed shared memories, and shared address space operating systems. This swizzling scheme can be used to provide data compatibility across machines with different word sizes, and even to provide binary code compatibility across machines with different hardware address sizes. Pointers are translated (`swizzled') from a long format to a shorter hardware-supported format at page fault time. No extra hardware is required, and no continual software overhead is incurred by presence checks or indirection of pointers. This pagewise technique exploits temporal and spatial locality in much the same way as a normal virtual memory; this gives it many desirable performance characteristics, especially given the trend toward larger main memories. It is easy to implement using common compilers and operating systems},
author = {Wilson, Paul R. and Kakkad, S.V.},
doi = {10.1109/IWOOOS.1992.252959},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson, Kakkad/Pointer swizzling at page fault time efficiently and compatibly supporting huge address spaces on standard hardware/Wilson, Kakkad - 1992 - Pointer swizzling at page fault time efficiently and compatibly su.pdf:pdf},
isbn = {0-8186-3015-9},
journal = {Proceedings of the Second International Workshop on Object Orientation in Operating Systems},
title = {{Pointer swizzling at page fault time: efficiently and compatibly supporting huge address spaces on standard hardware}},
year = {1992}
}
@misc{Microsoft2013,
author = {Microsoft},
title = {{A history of Windows - Microsoft Windows}},
url = {http://windows.microsoft.com/en-US/windows/history\#T1=era0},
urldate = {2015-07-27},
year = {2013}
}
@article{Wilson1995,
abstract = {Dynamic memory allocationhas been a fundamental part of most computersystems since roughly 1960, and memoryallocation is widely considered to be eithera solved problem or an insoluble one. Inthis survey, we describe a variety of memoryallocator designs and point out issues relevantto their design and evaluation. We thenchronologically survey most of the literatureon allocators between 1961 and 1995.(Scores of papers are discussed, in varyingdetail, and over 150 references are given.)We argue that allocator designs have beenunduly restricted by an emphasis on mechanism,rather than policy, while the latter ismore important; higher-level strategic issuesare still more important, but have not beengiven much attention.Most theoretical analyses and empirical allocatorevaluations to date have relied onvery strong assumptions of randomness andindependence, but real program behaviorexhibits important regularities that must beexploited if allocator...},
author = {Wilson, Paul R and Johnstone, Mark S and Neely, Michael and Boles, David},
doi = {10.1.1.111.8237},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson et al/Dynamic Storage Allocation A Survey and Critical Review/Wilson et al. - 1995 - Dynamic Storage Allocation A Survey and Critical Review.pdf:pdf},
isbn = {3540603689},
issn = {00380644},
journal = {Review Literature And Arts Of The Americas},
number = {7},
pages = {1--116},
pmid = {246520},
title = {{Dynamic Storage Allocation: A Survey and Critical Review}},
url = {http://www-2.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15213-f98/doc/dsa.pdf},
volume = {986},
year = {1995}
}
@book{McHoes2011,
address = {Boston},
author = {McHoes, Ann and Flynn, Da M.},
edition = {6th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/McHoes, Flynn/Understanding Operating Systems/McHoes, Flynn - 2011 - Understanding Operating Systems.pdf:pdf},
isbn = {9781439079201},
pmid = {12087385},
publisher = {Cengage Learning},
title = {{Understanding Operating Systems}},
year = {2011}
}
@book{Silberschatz2014,
author = {Silberschatz, Abraham and Galvin, Peter Baer and Gagne, Greg},
edition = {2nd},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Silberschatz, Galvin, Gagne/Operating System Concepts Essentials/Silberschatz, Galvin, Gagne - 2013 - Operating System Concepts Essentials.pdf:pdf},
isbn = {9781118804926},
publisher = {Wiley},
title = {{Operating System Concepts Essentials}},
year = {2013}
}
@misc{Ravenbrook2015,
booktitle = {Ravenbrook Ltd.},
title = {{Memory Management Reference 4.0 documentation}},
url = {http://www.memorymanagement.org/mmref/begin.html},
urldate = {2015-07-31},
year = {2015}
}
@book{Silberschatz2012,
author = {Silberschatz, Abraham and Galvin, Peter Baer and Gagne, Greg},
edition = {9th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Silberschatz, Galvin, Gagne/Operating Systeme Concepts/Silberschatz, Galvin, Gagne - 2012 - Operating Systeme Concepts.pdf:pdf},
isbn = {9781118063330},
publisher = {Wiley},
title = {{Operating Systeme Concepts}},
year = {2012}
}
