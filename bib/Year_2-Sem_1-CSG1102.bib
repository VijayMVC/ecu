Automatically generated by Mendeley Desktop 1.14
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@book{Blanchet2012,
address = {Hoboken, NJ},
author = {Blanchet, Gerard and Bertrand, Dupouy},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Blanchet, Bertrand/Computer Architecture/Blanchet, Bertrand - 2012 - Computer Architecture.pdf:pdf},
isbn = {9781848214293},
pages = {384},
publisher = {Wiley},
title = {{Computer Architecture}},
year = {2012}
}
@inproceedings{Potier1977,
address = {New York},
author = {Potier, Dominique},
booktitle = {SOSP '77 Proceedings of the sixth ACM symposium on Operating systems principles},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Potier/Analysis of demand paging policies with swapped working sets/Potier - 1977 - Analysis of demand paging policies with swapped working sets.pdf:pdf},
keywords = {and phrases,demand paging algorithms,paging algorithms,program behaviour,queueing network,semi-markov model,swapping,virtual memory,working-set memory management},
pages = {125--131},
title = {{Analysis of demand paging policies with swapped working sets}},
year = {1977}
}
@article{Wilson1992,
abstract = {Pointer swizzling at page fault time is a novel address translation mechanism that exploits conventional address translation hardware. It can support huge address spaces efficiently without long hardware addresses; such large address spaces are attractive for persistent object stores, distributed shared memories, and shared address space operating systems. This swizzling scheme can be used to provide data compatibility across machines with different word sizes, and even to provide binary code compatibility across machines with different hardware address sizes. Pointers are translated (`swizzled') from a long format to a shorter hardware-supported format at page fault time. No extra hardware is required, and no continual software overhead is incurred by presence checks or indirection of pointers. This pagewise technique exploits temporal and spatial locality in much the same way as a normal virtual memory; this gives it many desirable performance characteristics, especially given the trend toward larger main memories. It is easy to implement using common compilers and operating systems},
author = {Wilson, Paul R. and Kakkad, S.V.},
doi = {10.1109/IWOOOS.1992.252959},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson, Kakkad/Pointer swizzling at page fault time efficiently and compatibly supporting huge address spaces on standard hardware/Wilson, Kakkad - 1992 - Pointer swizzling at page fault time efficiently and compatibly su.pdf:pdf},
isbn = {0-8186-3015-9},
journal = {Proceedings of the Second International Workshop on Object Orientation in Operating Systems},
title = {{Pointer swizzling at page fault time: efficiently and compatibly supporting huge address spaces on standard hardware}},
year = {1992}
}
@article{Johansson1979,
abstract = {This article describes a simple way by which a microcomputer system can be made to use virtual addressing of a memory which is organised on two levels. Consideration has been given to the fact that the system must at all times be able to serve interrupts very quickly. The system is also capable of diagnosing itself and modifying the implementation of the virtual memory.},
author = {Johansson, Lars-\AA ke},
doi = {10.1016/0303-1268(79)90142-1},
file = {:C$\backslash$:/Users/marty/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Johansson - 1979 - Virtual memory management for microcomputers in real-time applications(2).pdf:pdf},
issn = {03031268},
journal = {Euromicro Newsletter},
month = jul,
number = {4},
pages = {235--238},
title = {{Virtual memory management for microcomputers in real-time applications}},
url = {http://www.sciencedirect.com/science/article/pii/0303126879901421},
volume = {5},
year = {1979}
}
@misc{ShieldsHistoryOfOS,
author = {Shields, Dave},
title = {{A Brief History of Operating Systems | The Wayward Word Press on WordPress.com}},
url = {http://daveshields.me/presentations/a-brief-history-of-operating-systems/},
urldate = {2015-07-27}
}
@article{Jacob1998,
abstract = {Los autores introducen tecnolog\'{\i}as b\'{a}sicas de memoria virtual y luego comparar los dise\~{n}os de administraci\'{o}n de memoria en tres microarquitecturas comerciales. Ellos muestran la diversidad de soporte de memoria virtual y, por implicaci\'{o}n, c\'{o}mo esta diversidad puede complicar y operaciones del sistema de concesiones. Bruce},
author = {Jacob, Bruce and Mudge, Trevor},
doi = {10.1109/2.683005},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Jacob, Mudge/Virtual Memory Issues of Implementation/Jacob, Mudge - 1998 - Virtual Memory Issues of Implementation.pdf:pdf},
issn = {00189162},
journal = {Computer},
number = {6},
pages = {33--43},
title = {{Virtual Memory: Issues of Implementation}},
url = {http://www.computer.org/csdl/mags/co/1998/06/r6033.pdf},
volume = {31},
year = {1998}
}
@article{Stonebraker1984,
author = {Stonebraker, Michael},
doi = {10.1145/850755.850757},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Stonebraker/Virtual Memory Transaction Management/Stonebraker - 1984 - Virtual Memory Transaction Management.pdf:pdf},
issn = {0163-5980},
journal = {ACM SIGOPS Operating Systems Review},
number = {2},
pages = {8--16},
title = {{Virtual Memory Transaction Management}},
url = {http://doi.acm.org.ezproxy.ecu.edu.au/10.1145/850755.850757},
volume = {18},
year = {1984}
}
@book{Lister1993,
address = {New York},
author = {Lister, A. M. and Eager, R. D.},
edition = {5th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Lister, Eager/Fundamentals of Operating Systems/Lister, Eager - 1993 - Fundamentals of Operating Systems.pdf:pdf},
isbn = {9781475722543},
pages = {196},
publisher = {Springer},
title = {{Fundamentals of Operating Systems}},
year = {1993}
}
@article{Wilkes2001,
abstract = {First Page of the Article},
author = {Wilkes, M. V.},
doi = {10.1109/TC.2001.966488},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilkes/High performance memory systems/Wilkes - 2001 - High performance memory systems.pdf:pdf},
issn = {00189340},
journal = {IEEE Transactions on Computers},
number = {11},
pages = {1105},
title = {{High performance memory systems}},
volume = {50},
year = {2001}
}
@article{Kwon2010,
author = {Kwon, Ohhoon and Koh, Kern},
doi = {10.1109/TCE.2010.5606292},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Kwon, Koh/Swap Space Management Technique for Portable Consumer Electronics with NAND Flash Memory/Kwon, Koh - 2010 - Swap Space Management Technique for Portable Consumer Electronics with NAND Flash Memory.pdf:pdf},
journal = {IEEE Transactions on Consumer Electronics},
number = {3},
pages = {1524--1531},
title = {{Swap Space Management Technique for Portable Consumer Electronics with NAND Flash Memory}},
volume = {56},
year = {2010}
}
@misc{Wikipedia2015a,
annote = {Check references, probably good stuff there for assignment.},
author = {Wikipedia},
title = {{Memory management}},
url = {https://en.wikipedia.org/wiki/Memory\_management},
urldate = {2015-08-10},
year = {2015}
}
@book{Blunden2003,
abstract = {Acknowledgments Publishing a book is an extended process that involves a number of people.Writing the final manuscript is just a small part of the big picture. This section is dedicated to all the people who directly, and indirectly, lent me their help. First and foremost, I would like to thank Jim Hill ofWordware Publishing for giving me the opportunity to write a book and believ- ing in me. I would also like to extend thanks toWes Beckwith and Beth Kohler.Wes, in addition to offering constant encouragement, does a great job of putting up with my e-mails and handling the vari- ous packages that I send. Beth Kohler, who performed the incredible task of reading my first book forWordware in a matter of days, has also been invaluable. I first spoke with Barry Brey back in the mid-1990s when I became interested in protected mode programming. He has always taken the time to answer my questions and offer his insight. Barry wrote the first book on the Intel chip set back in 1984. Since then, he has written well over 20 books. His current textbook on Intel’s IA32 processors is in its sixth edition. This is why I knew I had to ask Barry to be the technical editor for this book. Thanks, Barry. “Look, our middleware even runs on that littleWindows NT piece of crap.” —George Matkovitz “Hey, who was the \%\&\^{}\$ son of a \&*\$\# who wrote this optimized load of . . . oh, it was me.” —Mike Adler Mike Adler and George Matkovitz are two old fogeys who worked at Control Data back when Seymour Cray kicked the tar out of IBM. George helped to implement the world’s first message-passing operating system at Control Data. Mike also worked on a number of groundbreaking system software projects. I met these two codgers while performing R\&D for an ERP vendor in the Midwest. I hadn’t noticed how much these engineers had influenced me until I left Minnesota for California. It was almost as though I had learned through osmosis. A lot of my core understanding of software and the computer industry in general is based on the bits of hard-won advice and lore that these gentlemen passed on to me. I distinctly remember walking into Mike’s office and asking him, “Hey Mike, how do you build an operating system?” I would also like to thank Frank Merat, a senior professor at Case Western Reserve University. Frank has consistently shown interest in my work and has offered his support whenever he could. There is no better proving ground for a book than an established research university. Finally, I would like to thank SonicWALL, Inc. for laying me off and giving me the opportunity to sit around and think. The days I spent huddled with my computers were very productive.},
author = {Blunden, Bill},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Blunden/Memory Management Algorithms and Implementation in CC/Blunden - 2003 - Memory Management Algorithms and Implementation in CC.pdf:pdf},
isbn = {1556223471},
pages = {391},
publisher = {Wordware},
title = {{Memory Management Algorithms and Implementation in C/C++}},
year = {2003}
}
@article{Rosene1967,
abstract = {In multiprocessor systems it is desirable to look for and allocate storage without extensive data moving. Two techniques for accomplishing this, associative memory techniques and indirect addressing techniques, are described. It is concluded that the two methods are similar in performance, but that indirect addressing is more economical. An indirect addressing method is described in detail and various methods of implementation compared. The memory overhead and the time penalty (in memory accesses) are given as a function of memory size and method of implementation. It is concluded that a computed address table look-up technique should be used and that the block size should be either 256 or 512 words.},
author = {Rosene, A. Frederick},
doi = {10.1109/PGEC.1967.264774},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Rosene/Memory Allocation for Multiprocessors/Rosene - 1967 - Memory Allocation for Multiprocessors.pdf:pdf},
issn = {0367-7508},
journal = {IEEE Transactions on Electronic Computers},
keywords = {Associative memory,computed address,dynamic storage allocation,indirect address table,ltimultiprocessor,memory allocation,tree structure},
number = {5},
pages = {659--665},
title = {{Memory Allocation for Multiprocessors}},
volume = {EC-16},
year = {1967}
}
@article{Wilson1995,
abstract = {Dynamic memory allocationhas been a fundamental part of most computersystems since roughly 1960, and memoryallocation is widely considered to be eithera solved problem or an insoluble one. Inthis survey, we describe a variety of memoryallocator designs and point out issues relevantto their design and evaluation. We thenchronologically survey most of the literatureon allocators between 1961 and 1995.(Scores of papers are discussed, in varyingdetail, and over 150 references are given.)We argue that allocator designs have beenunduly restricted by an emphasis on mechanism,rather than policy, while the latter ismore important; higher-level strategic issuesare still more important, but have not beengiven much attention.Most theoretical analyses and empirical allocatorevaluations to date have relied onvery strong assumptions of randomness andindependence, but real program behaviorexhibits important regularities that must beexploited if allocator...},
author = {Wilson, Paul R and Johnstone, Mark S and Neely, Michael and Boles, David},
doi = {10.1.1.111.8237},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson et al/Dynamic Storage Allocation A Survey and Critical Review/Wilson et al. - 1995 - Dynamic Storage Allocation A Survey and Critical Review.pdf:pdf},
isbn = {3540603689},
issn = {00380644},
journal = {Review Literature And Arts Of The Americas},
number = {7},
pages = {1--116},
pmid = {246520},
title = {{Dynamic Storage Allocation: A Survey and Critical Review}},
url = {http://www-2.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15213-f98/doc/dsa.pdf},
volume = {986},
year = {1995}
}
@misc{CreationOfUnix,
title = {{The Creation of the UNIX Operating System: An Overview of the UNIX* Operating System}},
url = {http://web.archive.org/web/20070707183617/http://www.bell-labs.com/history/unix/tutorial.html},
urldate = {2015-07-27},
year = {2007}
}
@article{McNutt1996,
abstract = {Detailed instructions on configuring swap space on Solaris 2.4 and HP-UX 10.0 are provided.; Detailed instructions on configuring swap space on Solaris 2.4 and HP-UX 10.0 are provided.},
author = {McNutt, Dinah},
doi = {0742-3136},
journal = {Performance Computing / Unix Review},
number = {3},
pages = {77--80},
title = {{Configuring swap space}},
url = {http://ecu.summon.serialssolutions.com.ezproxy.ecu.edu.au/\#!/search?bookMark=ePnHCXMwbV3BCsIwDPXgRcGrFxEFjzJYu1i7syh-gPdQu3YIIuIq-vnmbe4iHkvSXkqTR5OXNx5MHHqzb6nlcFXDdgwmBuOhTNj3XihjR4MpSG2XuqXjLZuXuy\_lEQEmng770-6YfdUAsrokypTkfXLQO4SkJJ1zX6gq5iY4qkwM3nonSz},
volume = {14},
year = {1996}
}
@article{Oikawa2014,
author = {Oikawa, Shuichi},
doi = {10.1186/2193-1801-3-494},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Oikawa/Non-Volatile Memory Management Methods for Non-Volatile Main Memory based on File Systems/Oikawa - 2014 - Non-Volatile Memory Management Methods for Non-Volatile Main Memory based on File Systems.pdf:pdf},
journal = {SpringerPlus},
keywords = {file systems,memory,memory management,non-volatile,nv,operating systems},
number = {494},
pages = {1--8},
title = {{Non-Volatile Memory Management Methods for Non-Volatile Main Memory based on File Systems}},
volume = {3},
year = {2014}
}
@article{Alanko1983,
author = {Alanko, Timo O. and Verkamo, A. Inkeri},
doi = {10.1016/0167-7136(83)90150-6},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Alanko, Verkamo/Segmentation, paging and optimal page sizes in virtual memory/Alanko, Verkamo - 1983 - Segmentation, paging and optimal page sizes in virtual memory.pdf:pdf},
issn = {01677136},
journal = {Performance Evaluation},
keywords = {alanko was born in,finland,gram behaviour,he received the m,helsinki,in 1941,locality,page size,pro-,sc,segmentation,timo o,virtual memory},
number = {1},
pages = {13--33},
title = {{Segmentation, paging and optimal page sizes in virtual memory}},
volume = {3},
year = {1983}
}
@misc{Wikipedia2015b,
author = {Wikipedia},
title = {{Static memory allocation}},
url = {https://en.wikipedia.org/wiki/Static\_memory\_allocation},
urldate = {2015-08-10},
year = {2015}
}
@article{Azriel2014,
author = {Azriel, Leonid and Mendelson, Avi and Weiser, Uri},
doi = {10.1109/LCA.2014.2319077},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Azriel, Mendelson, Weiser/Peripheral Memory a Technique for Fighting Memory Bandwidth Bottleneck/Azriel, Mendelson, Weiser - 2014 - Peripheral Memory a Technique for Fighting Memory Bandwidth Bottleneck.pdf:pdf},
issn = {1556-6056},
journal = {IEEE Computer Architecture Letters},
number = {1},
pages = {54--57},
title = {{Peripheral Memory: a Technique for Fighting Memory Bandwidth Bottleneck}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6803056},
volume = {14},
year = {2014}
}
@article{Fiat1991,
abstract = {The paging problem is that of deciding which pages to keep in a memory of k pages in order to minimize the number of page faults. This paper introduces the marking algorithm, a simple randomized on-line algorithm for the paging problem, and gives a proof that its performance guarantee (competitive ratio) is O(log k). In contrast, no deterministic on-line algorithm can have a performance guarantee better than k.},
author = {Fiat, Amos and Karp, Richard and Luby, Mike and McGeoch, Lyle and Sleator, Daniel and Young, Neal E.},
doi = {10.1016/0196-6774(91)90041-V},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Fiat et al/Competitive Paging Algorithms/Fiat et al. - 1991 - Competitive Paging Algorithms.pdf:pdf},
journal = {Journal of Algorithms},
number = {4},
pages = {685--699},
title = {{Competitive Paging Algorithms}},
volume = {12},
year = {1991}
}
@article{Hofri1976,
abstract = {A multiprogramming computing system which utilizes a virtual memory operating system, with paging-on-demand, is defined in queueing-theoretic terms. The validity and possible uses of such a model are discussed. Several quantities and measures of effectiveness, such as paging time, total system response time, and memory requirements are computed. The discussion and analysis place emphasis on exact, computable results.},
author = {Hofri, M. and Yadin, M.},
doi = {10.1016/0020-0255(76)90020-7},
file = {:C$\backslash$:/Users/marty/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hofri, Yadin - 1976 - Multiprogramming with virtual memory—a queueing model.pdf:pdf},
issn = {00200255},
journal = {Information Sciences},
month = jan,
number = {3},
pages = {187--221},
title = {{Multiprogramming with virtual memory—a queueing model}},
url = {http://www.sciencedirect.com/science/article/pii/0020025576900207},
volume = {11},
year = {1976}
}
@article{Lim2013,
author = {Lim, Geunsik and Member, Student and Min, Changwoo and Eom, Young Ik},
doi = {10.1109/TCE.2013.6689690},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Lim et al/Virtual Memory Partitioning for Enhancing Application Performance in Mobile Platforms/Lim et al. - 2013 - Virtual Memory Partitioning for Enhancing Application Performance in Mobile Platforms.pdf:pdf},
journal = {IEEE Transactions on Consumer Electronics},
number = {4},
pages = {786--794},
title = {{Virtual Memory Partitioning for Enhancing Application Performance in Mobile Platforms}},
volume = {59},
year = {2013}
}
@misc{Microsoft2013,
author = {Microsoft},
title = {{A history of Windows - Microsoft Windows}},
url = {http://windows.microsoft.com/en-US/windows/history\#T1=era0},
urldate = {2015-07-27},
year = {2013}
}
@article{Rajaraman1979,
author = {Rajaraman, M. K. and Anderson, Robert O.},
doi = {10.1145/1041864.1041870},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Rajaraman, Anderson/Performance of a Virtual Memory - Some Experimental Results/Rajaraman, Anderson - 1979 - Performance of a Virtual Memory - Some Experimental Results.pdf:pdf},
journal = {ACM SIGMETRICS Performance Evaluation Review},
number = {4},
pages = {63--68},
title = {{Performance of a Virtual Memory - Some Experimental Results}},
volume = {8},
year = {1979}
}
@book{Stallings2012,
abstract = {Serving as both a basic reference and an up-to-date survey of the state of the art, this book covers the concepts, structure, and mechanisms of operating systems. Stallings presents the nature and characteristics of modern-day operating systems clearly and completely.Updated treatment of Windows as a case study to cover Windows Vista. Online animations with references incorporated throughout. A new chapter on Embedded Operating Systems. Part Six (Distributed Systems and Security) moved online, reducing the cost and size of the book without loss of content. Expanded coverage of security. New figures added, with many existing figures updated to enhance clarity.A useful reference for programmers, systems engineers, network designers and others involved in the design of computer products, information system and computer system personnel.},
author = {Stallings, William},
edition = {7th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Stallings/Operating Systems Internals and Design Principles/Stallings - 2012 - Operating Systems Internals and Design Principles.pdf:pdf},
isbn = {9780132309981},
issn = {17527163},
pages = {768},
pmid = {21808098},
publisher = {Prentice Hall},
title = {{Operating Systems: Internals and Design Principles}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/21820730},
volume = {68},
year = {2012}
}
@article{Greenberg1981,
author = {Greenberg, Bob},
doi = {10.1145/1041583.1041589},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Greenberg/Microsoft memory management document/Greenberg - 1981 - Microsoft memory management document.pdf:pdf},
issn = {01635816},
journal = {ACM SIGPC Notes},
number = {1-2},
pages = {34--41},
title = {{Microsoft memory management document}},
volume = {4},
year = {1981}
}
@book{Bach1986,
abstract = {This is the first, and still, the most comprehensive book to describe the sophisticated workings of the UNIX System V kernel--the internal algorithms, the structures that form the basis of the UNIX operating system, and their relationship to the programming interface. System programmers will gain a better understanding of how the kernel works and will be able to compare algorithms used in the UNIX system to algorithms used in other operating systems. Programmers on UNIX systems will gain a deeper understanding of how their programs interact with the system and can thereby code more efficient programs.},
author = {Bach, Maurice J.},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Bach/The Design of the UNIX Operating System/Bach - 1986 - The Design of the UNIX Operating System.pdf:pdf},
isbn = {9780132017992},
pages = {471},
publisher = {Prentice Hall},
title = {{The Design of the UNIX Operating System}},
year = {1986}
}
@book{Toppo2013,
author = {Toppo, Naveen and Dewan, Hrishikesh},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Toppo, Dewan/Pointers in C A Hands on Approach/Toppo, Dewan - 2013 - Pointers in C A Hands on Approach.pdf:pdf},
isbn = {9781430259114},
publisher = {Apress},
title = {{Pointers in C: A Hands on Approach}},
url = {http://books.google.com/books?hl=en\&lr=\&id=wJN0AgAAQBAJ\&oi=fnd\&pg=PP3\&dq=Pointers+in+C:+A+Hands+on+Approach\&ots=ZQYsednGKY\&sig=3kXoCw3JTYI3iZmBq24k-9KMg5s},
year = {2013}
}
@misc{Ravenbrook2015,
author = {Memorymanagement.org},
booktitle = {Ravenbrook Ltd.},
title = {{Memory Management Reference 4.0 documentation}},
url = {http://www.memorymanagement.org/mmref/begin.html},
urldate = {2015-07-31},
year = {2015}
}
@article{Hsu1997,
author = {Hsu, Shang-te and Chang, Ruei-chuan and Science, Information},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Hsu, Chang, Science/Continuous Checkpointing Joining the Checkpointing with Virtual Memory Paging/Hsu, Chang, Science - 1997 - Continuous Checkpointing Joining the Checkpointing with Virtual Memory Paging.pdf:pdf},
journal = {Software - Practice and Experience},
keywords = {fault tolerance,incremental checkpoint,memory paging},
number = {9},
pages = {1103--1120},
title = {{Continuous Checkpointing : Joining the Checkpointing with Virtual Memory Paging}},
volume = {27},
year = {1997}
}
@misc{Microsoft2010,
author = {Microsoft},
keywords = {kbsurveynew kbinfo kbhowto kbexpertiseadvanced KB2},
title = {{RAM, virtual memory, pagefile, and memory management in Windows}},
url = {https://support.microsoft.com/en-us/kb/2160852},
urldate = {2015-08-10},
year = {2010}
}
@inproceedings{Babaoglu1981,
address = {New York},
author = {Babaoglu, \"{O}zalp and Joy, William},
booktitle = {SOSP '81 Proceedings of the eighth ACM symposium on Operating systems principles},
doi = {10.1145/800216.806595},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Babaoglu, Joy/Converting a swap-based system to do paging in an architecture lacking page-referenced bits/Babaoglu, Joy - 1981 - Converting a swap-based system to do paging in an architecture lacking page-referenced bits.pdf:pdf},
isbn = {0-89791-062-1},
issn = {01635980},
number = {5},
pages = {78--86},
title = {{Converting a swap-based system to do paging in an architecture lacking page-referenced bits}},
volume = {15},
year = {1981}
}
@article{Milenkovic1990,
abstract = {This tutorial describes the current crop of commercial memory management units (MMUs) for 32-bit microprocessors. The discussion includes both complex- and reduced-instruction-set computers (CISCs and RISCs). The rationale, principles, and issues related to hardware support for memory management and virtual memory are reviewed. The design and features of high-end microprocessor MMUs are reviewed and compared with respect to a common set of criteria. Special attention is paid to Unix requirements and multiprocessor, multiple MMU considerations. The MMUs covered are Intel 80386, i486, and i860; Motorola's 68851 (MMU for the 68020), 68030, 68040, and 88200 (MMU for the 88000 series); the Fujitsu MB86920 (Sparc MMU); and the MIPS R2000/R3000},
author = {Milenkovic, M.},
doi = {10.1109/40.52948},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Milenkovic/Microprocessor memory management units/Milenkovic - 1990 - Microprocessor memory management units.pdf:pdf},
issn = {0272-1732},
journal = {IEEE Micro},
number = {2},
pages = {70--85},
title = {{Microprocessor memory management units}},
volume = {10},
year = {1990}
}
@article{VanWezenbeek1993,
author = {{Van Wezenbeek}, Anton M. and {Jan Withagen}, Willem J.},
doi = {10.1016/0165-6074(93)90254-I},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Van Wezenbeek, Jan Withagen/A survey of memory management/Van Wezenbeek, Jan Withagen - 1993 - A survey of memory management.pdf:pdf},
issn = {01656074},
journal = {Microprocessing and Microprogramming},
number = {3},
pages = {141--162},
title = {{A survey of memory management}},
volume = {36},
year = {1993}
}
@techreport{Wilson1992,
author = {Wilson, Paul R},
booktitle = {Memory Management},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson/Uniprocessor Garbage Collection Techniques/Wilson - 1992 - Uniprocessor Garbage Collection Techniques.pdf:pdf},
pages = {1--42},
title = {{Uniprocessor Garbage Collection Techniques}},
year = {1992}
}
@book{McHoes2010,
address = {Boston},
author = {McHoes, Ann and Flynn, Da M.},
edition = {6th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/McHoes, Flynn/Understanding Operating Systems/McHoes, Flynn - 2010 - Understanding Operating Systems.pdf:pdf},
isbn = {9781439079201},
pages = {608},
publisher = {Cengage Learning},
title = {{Understanding Operating Systems}},
year = {2010}
}
@book{Doeppner2010,
author = {Doeppner, Thomas W.},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Doeppner/Operating Systems in Depth Design and Programming/Doeppner - 2010 - Operating Systems in Depth Design and Programming.pdf:pdf},
isbn = {9780471687238},
pages = {848},
publisher = {John Wiley \& Sons},
title = {{Operating Systems in Depth: Design and Programming}},
year = {2010}
}
@inproceedings{Rajwar2005,
abstract = {Writing concurrent programs is difficult because of the complexity of ensuring proper synchronization. Conventional lock-based synchronization suffers from well-known limitations, so researchers have considered nonblocking transactions as an alternative. Recent hardware proposals have demonstrated how transactions can achieve high performance while not suffering limitations of lock-based mechanisms. However, current hardware proposals require programmers to be aware of platform-specific resource limitations such as buffer sizes, scheduling quanta, as well as events such as page faults, and process migrations. If the transactional model is to gain wide acceptance, hardware support for transactions must be virtualized to hide these limitations in much the same way that virtual memory shields the programmer from platform-specific limitations of physical memory. This paper proposes virtual transactional memory (VTM), a user-transparent system that shields the programmer from various platform-specific resource limitations. VTM maintains the performance advantage of hardware transactions, incurs low overhead in time, and has modest costs in hardware support. While many system-level challenges remain, VTM takes a step toward making transactional models more widely acceptable.},
author = {Rajwar, Ravi and Herlihy, Maurice and Lai, Konrad},
booktitle = {ISCA '05 Proceedings of the 32nd annual international symposium on Computer Architecture},
doi = {10.1109/ISCA.2005.54},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Rajwar, Herlihy, Lai/Virtualizing Transactional Memory/Rajwar, Herlihy, Lai - 2005 - Virtualizing Transactional Memory.pdf:pdf},
isbn = {076952270X},
issn = {10636897},
pages = {494--505},
title = {{Virtualizing Transactional Memory}},
year = {2005}
}
@book{Hansen1973,
abstract = {From the Preface MAIN GOAL This book tries to give students of computer science and professional programmers a general understanding of operating systems-the programs that enable people to share computers efficiently. To make the sharing of a computer tolerable, an operating system must enforce certain rules of behavior on all its users. One would therefore expect the designers of operating systems to do their utmost to make them as simple, efficient, and reliable as possible. A number of operating systems made in the early 1960's had these characteristics; but in the late 1960's designers were often overambitious and built enormous systems with poor performance. I see no inherent reason why operating systems should not reach the quality of program construction found in present compilers; this will require an understanding of the principles common to all operating systems and a consistent use of safe methods of designing large programs. It is my hope that this book will give you a start in this direction. I assume that you are familiar with the basic structure of computers and programming languages and have some experience in writing and testing non-trivial programs. In a few cases a knowledge of elementary calculus and probability theory is also needed. THEMES The main theme of the book is that operating systems are not radically different from other programs. The difficulties encountered in the design of efficient, reliable operating systems are the same as those one encounters in the design of other large programs, such as compilers or payroll programs. The historical importance of operating systems is that they led to the discovery of new principles of resource sharing, multiprogramming, and program construction. These principles have a general validity beyond operating systems, and I think that they should be taught as part of a core of computer science courses, following courses on programming languages, data structures, and computer structures. The purpose of an operating system is to share computational resources among competing users. To do this efficiently a designer must respect the technological limitations of these resources. Present computers consist of a small number of components (processors, store modules, and peripherals) which operate strictly sequentially. It is possible to multiplex a single processor and a small internal store (supported by a large backing store) among several computations to create the illusion that they are executed concurrently and have access to a large, homogeneous store. But these abstractions are not supported by the underlying technology, and if they are carried too far, the result is a total collapse of computational service known as thrashing. One of the difficulties of operating systems is the highly unpredictable nature of the demands made upon them. Independent users submit jobs with varying resource requirements at irregular intervals. An operating system is expected to schedule this unpredictable mixture of jobs in such a manner that the resources are utilized efficiently and the users can expect response within reasonably predictable times! The only way to satisfy these expectations is probably to put restrictions on the characteristics of jobs so the designer can take advantage of the expected usage of resources. This is certainly the main reason for the success of small, specialized operating systems. It also gives a plausible explanation of the failure of recent "general-purpose" operating systems which try to handle a much greater variety of jobs (in some cases for a variety of machine configurations as well). Although most components of present computers are sequential in nature, they can work simultaneously to some extent. This influences the design of operating systems so much that the subject can best be described as the management of shared multiprogramming systems. The main difficulty of multiprogramming is that concurrent activities can interact in a time-dependent manner which makes it practically impossible to locate programming errors by systematic testing. Perhaps, more than anything else, this explains the difficulty of making operating systems reliable. If we wish to succeed in designing large, reliable multiprogramming systems, we must use programming tools which are so well-structured that most time-dependent errors can be caught at compile time. It seems hopeless to try to solve this problem at the machine level of programming, nor can we expect to improve the situation by means of so-called "implementation languages," which retain the traditional "right" of systems programmers to manipulate addresses freely. I use the programming language Pascal throughout the text to define operating system concepts concisely by algorithms. Pascal combines the clarity needed for teaching with the efficiency required for design. It is easily understood by programmers familiar with Algol 60 or Fortran, but Pascal is a far more natural programming tool than these languages, particularly with respect to data structuring. As we go along, I extend Pascal with a well-structured notation for book contains eight chapters: Chapter 1 is an overview of operating systems. It defines the purpose of operating systems and outlines their historical development from early batch processing to recent interactive systems. It also points out the influence of technological constraints on the services offered by operating systems. Chapter 2 on sequential processes discusses the role of abstraction and structure in problem solving and the nature of computations. It summarizes structuring principles of data and sequential programs and gives an example of hierarchal 3 on concurrent processes emphasizes the role of reproducible behavior in program testing and compares various methods of process synchronization: simple and conditional critical regions, semaphores, message buffers, and event queues. It concludes with an analysis of the prevention of deadlocks by a hierarchal ordering of process interactions. Chapters 2 and 3 present an abstract view of computational processes and their representation in programming languages. The following Chapters, 4 to 6, discuss techniques of implementing processes on computers with limited resources. This problem is mainly technological, and it seems unrealistic to look for a unifying view of how different kinds of components are used efficiently. I try to describe various techniques and point out under which circumstances they are successful. Chapter 4 on processor management discusses the short-term problems of scheduling concurrent processes on a limited number of processors at the lowest level of programming. It also explains the implementation of synchronizing primitives and evaluates the influence of these abstractions on the real-time characteristics of a system. Chapter 5 on store management considers the short-term problems of sharing an internal store of limited capacity among concurrent processes. It summarizes current store technology and explains the influence of recursive procedures, concurrent processes, and dynamic relocation on store addressing. It ends with an analysis of placement algorithms and store multiplexing. Chapter 6 analyzes the performance of various medium-term scheduling algorithms. It uses elementary queuing theory to derive analytical results for the average response time to user requests in a single processor system with these priority rules: first-come first-served, shortest job next, highest response ratio next, and round robin. Foregound-background scheduling is 7 is concerned with resource protection-the problem of ensuring that physical resources and data are accessed by well-defined operations within computations authorized to use them. This is a fundamental problem of program design which should have been presented earlier in the book, if only I understood it better. It is handled inadequately in all present operating systems. As fragments of a solution I mention two of the more systematic techniques used: the class concept in Simula 67 and the capability concept. It is important that a designer of operating systems understand the underlying common principles. But the danger of this division of the subject into separate chapters is that you may find it difficult to see how they fit together into a working system and be unaware of the more subtle interactions between, say, process communication, store management, input/output, and preemptive scheduling. I have therefore tried to describe a complete operating system in some detail in Chapter 8. It is a case study of the RC 4000 multiprogramming system. It is by no means an ideal system, but it is the only one I know in detail, and is regarded as a consistent, simple, and reliable design which illustrates the concepts and implementation of concurrent processes. It should perhaps be explained why there are no chapters on input/ output and filing systems. For a particular operating system, considerations about how these tasks are handled are highly relevant. But in this book I have concentrated on the more elementary aspects of these complicated tasks, namely process synchronization, store management, scheduling, and each chapter many words are first used intuitively to give you a feeling for the subject. Later I return to these words and try to give reasonably precise verbal definitions of their meaning. My use of a common word may not always agree completely with the various shades of meaning it has acquired elsewhere, but I hope to justify the usefulness of the concept behind the word and show that it is possible to describe operating systems in an informal but consistent terminology. The most important terms are collected in a Vocabulary section at the end of the book. LITERATURE This book is},
author = {Hansen, Per Brinch},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Hansen/Operating System Principles/Hansen - 1973 - Operating System Principles.pdf:pdf},
isbn = {9780136378433},
pages = {366},
publisher = {Prentice Hall},
title = {{Operating System Principles}},
year = {1973}
}
@article{Denning1975,
author = {Denning, Peter J. and Graham, G. Scott},
doi = {10.1109/PROC.1975.9857},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Denning, Graham/Multiprogrammed Memory Management/Denning, Graham - 1975 - Multiprogrammed Memory Management.pdf:pdf},
journal = {Proceedings of the IEEE},
number = {6},
pages = {924--939},
title = {{Multiprogrammed Memory Management}},
volume = {63},
year = {1975}
}
@book{Gorman2004,
author = {Gorman, Mel},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Gorman/Understanding the Linux Virtual Memory Manager/Gorman - 2004 - Understanding the Linux Virtual Memory Manager.pdf:pdf},
isbn = {9780131453487},
pages = {748},
publisher = {Prentice Hall},
title = {{Understanding the Linux Virtual Memory Manager}},
year = {2004}
}
@misc{Micros,
author = {Microsoft},
title = {{Memory Management (Windows)}},
url = {https://msdn.microsoft.com/en-us/library/aa366779(VS.85).aspx},
urldate = {2015-07-31}
}
@article{Pietrek1995,
author = {Pietrek, Matt},
doi = {ISSN: 0889-9932},
journal = {Microsoft Systems Journal},
number = {4},
pages = {19+},
title = {{Understanding Windows 95 memory management: paging, address spaces and contexts}},
url = {http://ecu.summon.serialssolutions.com.ezproxy.ecu.edu.au/\#!/search?bookMark=ePnHCXMw42LgTQStzc4rAe\_hSmEBt-IsdYH1oBEHfMMisF7gZAgIRd6\_oRAO7ITmlxcrWJoq5IJWmVYq5MJXgFgpFIAv7dFRAOZHUD9UAZjfgBkJyM9LUQCt6gYWZcXcDLJuriHOHrqgwjUeFEMlRYnJ8YZmwDreyBh0\_zF-eQBakDqT},
volume = {10},
year = {1995}
}
@misc{Kath1992,
author = {Kath, Randy},
title = {{The Virtual-Memory Manager in Windows NT}},
url = {https://www.labri.fr/perso/betrema/winnt/ntvmm.html},
urldate = {2015-08-10},
year = {1992}
}
@book{Arpaci-Dusseau2014,
author = {Arpaci-Dusseau, Remzi H. and Arpaci-Dusseau, Andrea C.},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Arpaci-Dusseau, Arpaci-Dusseau/Operating Systems Three Easy Pieces/Arpaci-Dusseau, Arpaci-Dusseau - 2014 - Operating Systems Three Easy Pieces.pdf:pdf},
isbn = {9781105979125},
pages = {643},
publisher = {Arpaci-Dusseau},
title = {{Operating Systems: Three Easy Pieces}},
year = {2014}
}
@book{Wiseman2010,
author = {Wiseman, Yair and Song, Jian},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wiseman, Song/Advanced Operating Systems and Kernel Applications Techniques and Technologies/Wiseman, Song - 2010 - Advanced Operating Systems and Kernel Applications Techniques and Technologies.pdf:pdf},
isbn = {9781605668505},
pages = {320},
publisher = {Information Science Reference},
title = {{Advanced Operating Systems and Kernel Applications: Techniques and Technologies}},
year = {2010}
}
@article{Borodin1995,
abstract = {The Sleator-Tarjan competitive analysis of paging (Comm. ACM28 (1985), 202-208) gives us the ability to make strong theoretical statements about the performance of paging algorithms without making probabilistic assumptions on the input. Nevertheless practitioners voice reservations about the model, citing its inability to discern between LRU and FIFO (algorithms whose performances differ markedly in practice), and the fact that the theoretical comptitiveness of LRU is much larger than observed in practice, In addition, we would like to address the following important question: given some knowledge of a program′s reference pattern, can we use it to improve paging performance on that program? We address these concerns by introducing an important practical element that underlies the philosophy behind paging: locality of reference. We devise a graph-theoretical model, the access graph, for studying locality of reference. We use it to prove results that address the practical concerns mentioned above, In addition, we use our model to address the following questions: How well is LRU likely to perform on a given program? Is there a universal paging algorithm that achieves (nearly) the best possible paging performance on every program? We do so without compromising the benefits of the Sleator-Tarjan model, while bringing it closer to practice.},
author = {Borodin, Allan and Raghavan, Prabhakar and Irani, Sandy and Schieber, Baruch},
doi = {doi:10.1006/jcss.1995.1021},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Borodin et al/Competitive paging with locality of reference/Borodin et al. - 1995 - Competitive paging with locality of reference.pdf:pdf},
isbn = {0897913973},
issn = {00220000},
journal = {Journal of Computer and System Sciences},
number = {2},
pages = {244--258},
title = {{Competitive paging with locality of reference}},
volume = {50},
year = {1995}
}
@book{Silberschatz2013,
author = {Silberschatz, Abraham and Galvin, Peter Baer and Gagne, Greg},
edition = {2nd},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Silberschatz, Galvin, Gagne/Operating System Concepts Essentials/Silberschatz, Galvin, Gagne - 2013 - Operating System Concepts Essentials.pdf:pdf},
isbn = {9781118804926},
pages = {784},
publisher = {Wiley},
title = {{Operating System Concepts Essentials}},
year = {2013}
}
@article{Nawrocki1983,
author = {Nawrocki, Jerzy R.},
doi = {10.1016/0020-0190(83)90069-8},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Nawrocki/Contiguous Segmentation with Limited Compacting/Nawrocki - 1983 - Contiguous Segmentation with Limited Compacting.pdf:pdf},
journal = {Information Processing Letters},
pages = {57--62},
title = {{Contiguous Segmentation with Limited Compacting}},
volume = {17},
year = {1983}
}
@book{Tanenbaum2014,
author = {Tanenbaum, Andrew S. and Bos, Herbert},
edition = {4th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Tanenbaum, Bos/Modern Operating Systems/Tanenbaum, Bos - 2014 - Modern Operating Systems.pdf:pdf},
isbn = {9780133591620},
pages = {1137},
publisher = {Prentice Hall},
title = {{Modern Operating Systems}},
year = {2014}
}
@article{Denning1996,
author = {Denning, Peter J.},
doi = {10.1145/234313.234403},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Denning/Virtual Memory/Denning - 1996 - Virtual Memory.pdf:pdf},
journal = {ACM Computing Surveys (CSUR)},
number = {1},
pages = {213--216},
title = {{Virtual Memory}},
volume = {28},
year = {1996}
}
@book{Elmasri2009,
author = {Elmasri, Ramez and Levine, David and Carrick, A},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Elmasri, Levine, Carrick/Operating Systems A Spiral Approach/Elmasri, Levine, Carrick - 2009 - Operating Systems A Spiral Approach.pdf:pdf},
isbn = {9780072449815},
pages = {544},
publisher = {McGraw-Hill Education},
title = {{Operating Systems: A Spiral Approach}},
year = {2009}
}
@article{Brown1984,
author = {Brown, R. L. and Denning, Peter J. and Tichy, W. F},
doi = {10.1109/MC.1984.1658969},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Brown, Denning, Tichy/Advanced Operating Systems/Brown, Denning, Tichy - 1984 - Advanced Operating Systems.pdf:pdf},
journal = {Computer},
number = {10},
pages = {173--190},
title = {{Advanced Operating Systems}},
volume = {17},
year = {1984}
}
@article{Pohm1981,
author = {Pohm, A. V. and Smay, T. A.},
doi = {10.1109/C-M.1981.220216},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Pohm, Smay/Tutorial Series 13 Computer Memory Systems/Pohm, Smay - 1981 - Tutorial Series 13 Computer Memory Systems.pdf:pdf},
issn = {0018-9162},
journal = {Computer},
number = {10},
pages = {93--110},
title = {{Tutorial Series 13 Computer Memory Systems}},
volume = {14},
year = {1981}
}
@inproceedings{IWMM95,
author = {Hartmanis, J and Leeuwen, J Van and Brauer, W and Gries, D and Stoer, J},
booktitle = {International Workshop IWMM 95 Kinross, UK, September 27-29, 1995 Proceedings},
doi = {10.1007/3-540-60368-9},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Hartmanis et al/Memory Management/Hartmanis et al. - 1995 - Memory Management.pdf:pdf},
isbn = {978-3-540-60368-9},
title = {{Memory Management}},
url = {http://link.springer.com/10.1007/3-540-60368-9},
volume = {986},
year = {1995}
}
@book{Jacob2008,
address = {Burlington, MA},
author = {Jacob, Bruce and Ng, Spencer W. and Wang, David T.},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Jacob, Ng, Wang/Memory Systems - Cache, DRAM, Disk/Jacob, Ng, Wang - 2008 - Memory Systems - Cache, DRAM, Disk.pdf:pdf},
isbn = {9780123797513},
pages = {998},
publisher = {Morgan Kaufmann Publishers},
title = {{Memory Systems - Cache, DRAM, Disk}},
year = {2008}
}
@misc{Bartlett2004,
author = {Bartlett, Jonathan},
booktitle = {IBM (16th November)},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Bartlett/Inside Memory Management The choices, tradeoffs, and implementations of dynamic allocation/Bartlett - 2004 - Inside Memory Management The choices, tradeoffs, and implementations of dynamic allocation.pdf:pdf},
pages = {1--23},
title = {{Inside Memory Management: The choices, tradeoffs, and implementations of dynamic allocation}},
url = {http://www.ibm.com/developerworks/linux/library/l-memory/},
urldate = {2015-07-31},
year = {2004}
}
@article{Kolanski2008,
abstract = {We present an extension to classical separation logic which allows reasoning about virtual memory. Our logic is formalised in the Isabelle/HOL theorem prover in a manner allowing classical separation logic notation to be used at an abstract level. We demonstrate that in the common cases, such as user applications, our logic reduces to classical separation logic. At the same time we can express properties about page tables, direct physical memory access, virtual memory access, and shared memory in detail. ?? 2008 Elsevier B.V. All rights reserved.},
author = {Kolanski, Rafal},
doi = {10.1016/j.entcs.2008.06.042},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Kolanski/A Logic for Virtual Memory/Kolanski - 2008 - A Logic for Virtual Memory.pdf:pdf},
issn = {15710661},
journal = {Electronic Notes in Theoretical Computer Science},
keywords = {Interactive Theorem Proving,Separation Logic,Virtual Memory},
number = {C},
pages = {61--77},
publisher = {Elsevier B.V.},
title = {{A Logic for Virtual Memory}},
url = {http://dx.doi.org/10.1016/j.entcs.2008.06.042},
volume = {217},
year = {2008}
}
@inproceedings{Karcanaj2015,
author = {Karcanaj, Helidon and Banushi, Mario and Tafa, Igli and Fejzaj, Julian and Saatciu, Denis},
booktitle = {2015 Fifth International Conference on Advanced Computing \& Communication Technologies},
doi = {10.1109/ACCT.2015.96},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Karcanaj et al/Virtual Memory Behavior around Physical and Virtual System Limits/Karcanaj et al. - 2015 - Virtual Memory Behavior around Physical and Virtual System Limits.pdf:pdf},
isbn = {978-1-4799-8488-6},
keywords = {- paging,page fault,redis,thrashing,tirana university tirana university,virtual memory},
pages = {261--265},
title = {{Virtual Memory Behavior around Physical and Virtual System Limits}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7079090},
year = {2015}
}
@book{Silberschatz2012,
author = {Silberschatz, Abraham and Galvin, Peter Baer and Gagne, Greg},
edition = {9th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Silberschatz, Galvin, Gagne/Operating System Concepts/Silberschatz, Galvin, Gagne - 2012 - Operating System Concepts.pdf:pdf},
isbn = {9781118063330},
publisher = {Wiley},
title = {{Operating System Concepts}},
year = {2012}
}
@incollection{Blanchet2012,
abstract = {Virtual memory is a management technique that relies on the combined use of the main memory and a mass storage unit. This chapter describes virtual memory management concepts, rules and access rights. During the execution of a program, the processor generates virtual addresses that are sent to the memory management module. For the purpose of making it easier to understand the mechanisms, the chapter discusses the example of a machine equipped with 256 words of physical memory organized in 16 word pages, or 16 pages of 16 words and a mass storage unit with 1,024 words, or 64 pages of 16 words, set aside for the user's needs. To illustrate the mechanisms of two‐level paging used in virtual memory management systems, the chapter then presents an example of the practical implementation of the memory management modules. It finally provides another example to describe the concept of paged segmentation.},
address = {Hoboken, NJ},
author = {Blanchet, Gerard and Bertrand, Dupouy},
booktitle = {Computer Architecture},
chapter = {9},
doi = {10.1002/9781118577431.ch9},
isbn = {9781848214293},
pages = {175--204},
publisher = {John Wiley \& Sons},
title = {{Virtual Memory}},
url = {http://ecu.summon.serialssolutions.com/2.0.0/link/0/eLvHCXMwzV3NS8MwFA-i4EFF50edKPSiB6W1TbY2PXgY8wvUk1Nkl9IuCRvonF130L\_eJK\_L1hVEbx56CITk0YT3fi\_vvd9DiGDXcxZ0QkgFZyTFNJEII0kjQZtp2kz9JAglYKXM5GZq7mjT4rPysv5fD34BEavhMfZmz6\_AN1D0aThrzcUIjNf9Kk-5DwGIGwiSZ0VdPcD},
year = {2012}
}
@book{Comer2015,
author = {Comer, Douglas},
edition = {2nd},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Comer/Operating System Design The Xinu Approach/Comer - 2015 - Operating System Design The Xinu Approach.pdf:pdf},
isbn = {9781498712439},
issn = {0011684X},
number = {7},
pages = {701},
publisher = {CRC Press},
title = {{Operating System Design: The Xinu Approach}},
volume = {26},
year = {2015}
}
@book{Dhamdhere2008,
abstract = {After authoring a best-selling text in India, Dhananjay Dhamdhere has written Operating Systems, and it includes precise definitions and clear explanations of fundamental concepts, which makes this text an excellent text for the first course in operating systems. Concepts, techniques, and case studies are well integrated so many design and implementation details look obvious to the student. Exceptionally clear explanations of concepts are offered, and coverage of both fundamentals and such cutting-edge material like encryption and security is included. The numerous case studies are tied firmly to real-world experiences with operating systems that students will likely encounter.},
author = {Dhamdhere, Dhananjay M.},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Dhamdhere/Operating Systems A Concept-Based Approach/Dhamdhere - 2008 - Operating Systems A Concept-Based Approach.pdf:pdf},
isbn = {9780072957693},
pages = {864},
publisher = {McGraw-Hill Education},
title = {{Operating Systems A Concept-Based Approach}},
year = {2008}
}
@incollection{Jacob2008,
abstract = {Virtual memory is one technique for managing the resource of physical memory, including the caches, main memory, and disk subsystem. It provides software with the illusion of a very large amount of main memory. The basic function of virtual memory is to create a virtual-machine environment for every process, which among other things allows text, data, and stack regions to begin at statically known locations in all processes without fear of conflict. It is the primary client of the memory system, in that a user process is not aware of physical memory and does not access it directly. Different architectures provide support for operating system features in very different ways. One of the fundamental differences is their treatment of address spaces. The chapter presents a taxonomy describing the architectural organization and protection of an address space. A system's interrupt mechanism, memory map, and page table/TLB combinations comprise the heart of a typical virtual memory system, one of the most fundamental services that a modern operating system provides. It highlights the operating system's use of and response to precise interrupts, arguably the fundamental building block of today's multi-tasking systems. This chapter presents a definition for a base in-order pipeline and then adds support for nested interrupts and virtual memory management via a MIPS-like memory map, page table, and TLB.},
address = {Burlington, MA},
author = {Jacob, Bruce and Ng, Spencer W. and Wang, David T. and Rodriguez, Samuel},
booktitle = {Memory Systems - Cache, DRAM, Disk},
chapter = {31},
doi = {10.1016/B978-012379751-3.50033-3},
file = {:C$\backslash$:/Users/marty/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Jacob et al. - 2008 - Memory Systems.pdf:pdf},
isbn = {9780123797513},
pages = {883--920},
publisher = {Morgan Kaufmann Publishers},
title = {{Virtual Memory}},
url = {http://www.sciencedirect.com/science/article/pii/B9780123797513500333},
year = {2008}
}
@misc{Wikipedia2015,
annote = {Check references, probably good stuff there for assignment.},
author = {Wikipedia},
title = {{Virtual memory}},
url = {https://en.wikipedia.org/wiki/Virtual\_memory},
urldate = {2015-08-10},
year = {2015}
}
@article{Doran1976,
abstract = {"Virtual memory" is a computing term which has come into increasing use in recent years. Unfortunately, like other new expressions, its use often causes controversy and misunderstanding, for it is used to mean different things by different people. Not long ago when one major computer vendor announced the introduction of the new technique of 'virtual storage,' other manufacturers complained that they had been doing the same thing for years under a different name (see Figure 1).},
author = {Doran, R W},
doi = {10.1109/C-M.1976.218408},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Doran/Virtual Memory/Doran - 1976 - Virtual Memory.pdf:pdf},
journal = {Computer},
number = {10},
pages = {27--37},
title = {{Virtual Memory}},
url = {http://ecu.summon.serialssolutions.com.ezproxy.ecu.edu.au/\#!/search?bookMark=ePnHCXMwbZ09C8IwEIaLOPiB\_gPBwU2q-WrTzkVx6aauR9ok4CKiFfz53iXaqUsp9E3Icr03JPfcLFkYupt970INl00iToezcl-l9Y5j-tuFbUUxIpJpRnxkrsbhf0mhl4vJ\_xBAYSqZJsvr7UmlFOuarp6ic7ocD-fqlP56BaQtQcxSJZ},
volume = {9},
year = {1976}
}
@book{Silberschatz2009,
author = {Silberschatz, Abraham and Galvin, Peter Baer and Gagne, Greg},
edition = {8th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Silberschatz, Galvin, Gagne/Operating System Concepts with Java/Silberschatz, Galvin, Gagne - 2009 - Operating System Concepts with Java.pdf:pdf},
isbn = {9780470509494},
pages = {1040},
publisher = {Wiley},
title = {{Operating System Concepts with Java}},
year = {2009}
}
