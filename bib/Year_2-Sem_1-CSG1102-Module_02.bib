Automatically generated by Mendeley Desktop 1.14
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Wilson1992,
abstract = {Pointer swizzling at page fault time is a novel address translation mechanism that exploits conventional address translation hardware. It can support huge address spaces efficiently without long hardware addresses; such large address spaces are attractive for persistent object stores, distributed shared memories, and shared address space operating systems. This swizzling scheme can be used to provide data compatibility across machines with different word sizes, and even to provide binary code compatibility across machines with different hardware address sizes. Pointers are translated (`swizzled') from a long format to a shorter hardware-supported format at page fault time. No extra hardware is required, and no continual software overhead is incurred by presence checks or indirection of pointers. This pagewise technique exploits temporal and spatial locality in much the same way as a normal virtual memory; this gives it many desirable performance characteristics, especially given the trend toward larger main memories. It is easy to implement using common compilers and operating systems},
author = {Wilson, Paul R. and Kakkad, S.V.},
doi = {10.1109/IWOOOS.1992.252959},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson, Kakkad/Pointer swizzling at page fault time efficiently and compatibly supporting huge address spaces on standard hardware/Wilson, Kakkad - 1992 - Pointer swizzling at page fault time efficiently and compatibly su.pdf:pdf},
isbn = {0-8186-3015-9},
journal = {Proceedings of the Second International Workshop on Object Orientation in Operating Systems},
title = {{Pointer swizzling at page fault time: efficiently and compatibly supporting huge address spaces on standard hardware}},
year = {1992}
}
@misc{Micros,
author = {Microsoft},
title = {{Memory Management (Windows)}},
url = {https://msdn.microsoft.com/en-us/library/aa366779(VS.85).aspx},
urldate = {2015-07-31}
}
@article{Wilson1995,
abstract = {Dynamic memory allocationhas been a fundamental part of most computersystems since roughly 1960, and memoryallocation is widely considered to be eithera solved problem or an insoluble one. Inthis survey, we describe a variety of memoryallocator designs and point out issues relevantto their design and evaluation. We thenchronologically survey most of the literatureon allocators between 1961 and 1995.(Scores of papers are discussed, in varyingdetail, and over 150 references are given.)We argue that allocator designs have beenunduly restricted by an emphasis on mechanism,rather than policy, while the latter ismore important; higher-level strategic issuesare still more important, but have not beengiven much attention.Most theoretical analyses and empirical allocatorevaluations to date have relied onvery strong assumptions of randomness andindependence, but real program behaviorexhibits important regularities that must beexploited if allocator...},
author = {Wilson, Paul R and Johnstone, Mark S and Neely, Michael and Boles, David},
doi = {10.1.1.111.8237},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson et al/Dynamic Storage Allocation A Survey and Critical Review/Wilson et al. - 1995 - Dynamic Storage Allocation A Survey and Critical Review.pdf:pdf},
isbn = {3540603689},
issn = {00380644},
journal = {Review Literature And Arts Of The Americas},
number = {7},
pages = {1--116},
pmid = {246520},
title = {{Dynamic Storage Allocation: A Survey and Critical Review}},
url = {http://www-2.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15213-f98/doc/dsa.pdf},
volume = {986},
year = {1995}
}
@misc{Bartlett2004,
author = {Bartlett, Jonathan},
booktitle = {IBM (16th November)},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Bartlett/Inside Memory Management The choices, tradeoffs, and implementations of dynamic allocation/Bartlett - 2004 - Inside Memory Management The choices, tradeoffs, and implementations of dynamic allocation.pdf:pdf},
pages = {1--23},
title = {{Inside Memory Management: The choices, tradeoffs, and implementations of dynamic allocation}},
url = {http://www.ibm.com/developerworks/linux/library/l-memory/},
urldate = {2015-07-31},
year = {2004}
}
@misc{Ravenbrook2015,
booktitle = {Ravenbrook Ltd.},
title = {{Memory Management Reference 4.0 documentation}},
url = {http://www.memorymanagement.org/mmref/begin.html},
urldate = {2015-07-31},
year = {2015}
}
@techreport{Wilson1992,
author = {Wilson, Paul R},
booktitle = {Memory Management},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson/Uniprocessor Garbage Collection Techniques/Wilson - 1992 - Uniprocessor Garbage Collection Techniques.pdf:pdf},
pages = {1--42},
title = {{Uniprocessor Garbage Collection Techniques}},
year = {1992}
}
