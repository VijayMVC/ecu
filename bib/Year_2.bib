Automatically generated by Mendeley Desktop 1.14
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Borodin1995,
abstract = {The Sleator-Tarjan competitive analysis of paging (Comm. ACM28 (1985), 202-208) gives us the ability to make strong theoretical statements about the performance of paging algorithms without making probabilistic assumptions on the input. Nevertheless practitioners voice reservations about the model, citing its inability to discern between LRU and FIFO (algorithms whose performances differ markedly in practice), and the fact that the theoretical comptitiveness of LRU is much larger than observed in practice, In addition, we would like to address the following important question: given some knowledge of a program′s reference pattern, can we use it to improve paging performance on that program? We address these concerns by introducing an important practical element that underlies the philosophy behind paging: locality of reference. We devise a graph-theoretical model, the access graph, for studying locality of reference. We use it to prove results that address the practical concerns mentioned above, In addition, we use our model to address the following questions: How well is LRU likely to perform on a given program? Is there a universal paging algorithm that achieves (nearly) the best possible paging performance on every program? We do so without compromising the benefits of the Sleator-Tarjan model, while bringing it closer to practice.},
author = {Borodin, Allan and Raghavan, Prabhakar and Irani, Sandy and Schieber, Baruch},
doi = {doi:10.1006/jcss.1995.1021},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Borodin et al/Competitive paging with locality of reference/Borodin et al. - 1995 - Competitive paging with locality of reference.pdf:pdf},
isbn = {0897913973},
issn = {00220000},
journal = {Journal of Computer and System Sciences},
number = {2},
pages = {244--258},
title = {{Competitive paging with locality of reference}},
volume = {50},
year = {1995}
}
@book{Pressman2010,
author = {Pressman, Roger S.},
edition = {7th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Pressman/Software Engineering A Practitioner's Approach/Pressman - 2010 - Software Engineering A Practitioner's Approach.pdf:pdf},
isbn = {9780073375977},
publisher = {McGraw-Hill},
title = {{Software Engineering: A Practitioner's Approach}},
year = {2010}
}
@book{Luger2009,
abstract = {This accessible, comprehensive book captures the essence of artificial intelligence - solving the complex problems that arise wherever computer technology is applied. With his signature enthusiasm, George Luger demonstrates numerous techniques and strategies for addressing the many challenges facing computer scientists today. Diverse topics on this exciting and ever-evolving field range from perception and adaptation using neural networks and genetic algorithms, intelligent agents with ontologies, automated reasoning, natural language analysis, and stochastic approaches to machine learning. This book is ideal for a one - or two-semester university course on AI. New to this edition: A new chapter on stochastic approaches to machine learning, including first-prder Bayesian networks, variants of hidden Markov models, inference with Markov random fields and loopy belief propagation. Presentation of parameter fitting with expectation maximization learning and structure learning using Markov chain Monte Carlo sampling. Use of Markov decision processes in reinforcement learning. Presentation of agent technology and the use of ontologies. Natural language processing with dynamic programming (the Earley parser) and other probabilistic parsing techniques including Viterbi. A new supplemental programming book is available: AI Algorithms in Prolog, Lisp, and Java. Available online and in print, this book demonstrates these languages as tools for building many of the algorithms presented throughout Luger's AI book.},
author = {Luger, George F},
doi = {citeulike-article-id:1048507},
edition = {6th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Luger/Artificial Intelligence Structures and Strategies for Complex Problem Solving/Luger - 2009 - Artificial Intelligence Structures and Strategies for Complex Problem Solving.pdf:pdf},
isbn = {0321545893},
issn = {9780321545893 0321545893},
pmid = {3215},
publisher = {Pearson Education},
title = {{Artificial Intelligence: Structures and Strategies for Complex Problem Solving}},
url = {http://www.amazon.com/dp/0321545893},
year = {2009}
}
@book{Lewis2008,
author = {Lewis, James P.},
doi = {10.1036/0071462910},
edition = {2nd},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Lewis/Mastering Project Management/Lewis - 2008 - Mastering Project Management.pdf:pdf},
isbn = {0071593373},
pages = {433},
publisher = {McGraw-Hill},
title = {{Mastering Project Management}},
year = {2008}
}
@article{Hofri1976,
abstract = {A multiprogramming computing system which utilizes a virtual memory operating system, with paging-on-demand, is defined in queueing-theoretic terms. The validity and possible uses of such a model are discussed. Several quantities and measures of effectiveness, such as paging time, total system response time, and memory requirements are computed. The discussion and analysis place emphasis on exact, computable results.},
author = {Hofri, M. and Yadin, M.},
doi = {10.1016/0020-0255(76)90020-7},
file = {:C$\backslash$:/Users/marty/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hofri, Yadin - 1976 - Multiprogramming with virtual memory—a queueing model.pdf:pdf},
issn = {00200255},
journal = {Information Sciences},
month = jan,
number = {3},
pages = {187--221},
title = {{Multiprogramming with virtual memory—a queueing model}},
url = {http://www.sciencedirect.com/science/article/pii/0020025576900207},
volume = {11},
year = {1976}
}
@book{Boehm2008,
author = {Boehm, Anne and Murach, Joel},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Boehm, Murach/Murach's ASP.NET 3.5 Web Programming with C\# 2008/Boehm, Murach - 2008 - Murach's ASP.NET 3.5 Web Programming with C\# 2008.pdf:pdf},
isbn = {9781890774486},
publisher = {Mike Murach \& Associates},
title = {{Murach's ASP.NET 3.5 Web Programming with C\# 2008}},
year = {2008}
}
@article{Rajaraman1979,
author = {Rajaraman, M. K. and Anderson, Robert O.},
doi = {10.1145/1041864.1041870},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Rajaraman, Anderson/Performance of a Virtual Memory - Some Experimental Results/Rajaraman, Anderson - 1979 - Performance of a Virtual Memory - Some Experimental Results.pdf:pdf},
journal = {ACM SIGMETRICS Performance Evaluation Review},
number = {4},
pages = {63--68},
title = {{Performance of a Virtual Memory - Some Experimental Results}},
volume = {8},
year = {1979}
}
@article{Avots1969a,
abstract = {WHEN THE MANAGEMENT of Sophisticated Sys- tems Company saw that the life of one of their more profitable product lines was rapidly fading, they jumped at an opportunity to develop a similar but more sophisticated product. An experienced team was assigned to carry out the design and get the product into manufacturing within twelve months. However, a year and a half and several million dollars later, tlie first prototype still had not passed system tests, and some members of the board were wondering whether the whole idea should be dropped. The project management sys- tem which had been developed to a high state in this company had unexpectedly failed.},
author = {Avots, Ivars},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Avots/Why Does Project Management Fail/Avots - 1969 - Why Does Project Management Fail.pdf:pdf},
isbn = {00081256},
issn = {00251895},
journal = {California Management Review},
number = {1},
pages = {77--82},
pmid = {5049361},
title = {{Why Does Project Management Fail ?}},
volume = {XII},
year = {1969}
}
@article{Denning1996,
author = {Denning, Peter J.},
doi = {10.1145/234313.234403},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Denning/Virtual Memory/Denning - 1996 - Virtual Memory.pdf:pdf},
journal = {ACM Computing Surveys (CSUR)},
number = {1},
pages = {213--216},
title = {{Virtual Memory}},
volume = {28},
year = {1996}
}
@article{Wilson1995,
abstract = {Dynamic memory allocationhas been a fundamental part of most computersystems since roughly 1960, and memoryallocation is widely considered to be eithera solved problem or an insoluble one. Inthis survey, we describe a variety of memoryallocator designs and point out issues relevantto their design and evaluation. We thenchronologically survey most of the literatureon allocators between 1961 and 1995.(Scores of papers are discussed, in varyingdetail, and over 150 references are given.)We argue that allocator designs have beenunduly restricted by an emphasis on mechanism,rather than policy, while the latter ismore important; higher-level strategic issuesare still more important, but have not beengiven much attention.Most theoretical analyses and empirical allocatorevaluations to date have relied onvery strong assumptions of randomness andindependence, but real program behaviorexhibits important regularities that must beexploited if allocator...},
author = {Wilson, Paul R and Johnstone, Mark S and Neely, Michael and Boles, David},
doi = {10.1.1.111.8237},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson et al/Dynamic Storage Allocation A Survey and Critical Review/Wilson et al. - 1995 - Dynamic Storage Allocation A Survey and Critical Review.pdf:pdf},
isbn = {3540603689},
issn = {00380644},
journal = {Review Literature And Arts Of The Americas},
number = {7},
pages = {1--116},
pmid = {246520},
title = {{Dynamic Storage Allocation: A Survey and Critical Review}},
url = {http://www-2.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15213-f98/doc/dsa.pdf},
volume = {986},
year = {1995}
}
@book{McHoes2011,
address = {Boston},
author = {McHoes, Ann and Flynn, Da M.},
edition = {6th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/McHoes, Flynn/Understanding Operating Systems/McHoes, Flynn - 2011 - Understanding Operating Systems.pdf:pdf},
isbn = {9781439079201},
pmid = {12087385},
publisher = {Cengage Learning},
title = {{Understanding Operating Systems}},
year = {2011}
}
@book{Toppo2013,
author = {Toppo, Naveen and Dewan, Hrishikesh},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Toppo, Dewan/Pointers in C A Hands on Approach/Toppo, Dewan - 2013 - Pointers in C A Hands on Approach.pdf:pdf},
isbn = {9781430259114},
publisher = {Apress},
title = {{Pointers in C: A Hands on Approach}},
url = {http://books.google.com/books?hl=en\&lr=\&id=wJN0AgAAQBAJ\&oi=fnd\&pg=PP3\&dq=Pointers+in+C:+A+Hands+on+Approach\&ots=ZQYsednGKY\&sig=3kXoCw3JTYI3iZmBq24k-9KMg5s},
year = {2013}
}
@article{Pohm1981,
author = {Pohm, A. V. and Smay, T. A.},
doi = {10.1109/C-M.1981.220216},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Pohm, Smay/Tutorial Series 13 Computer Memory Systems/Pohm, Smay - 1981 - Tutorial Series 13 Computer Memory Systems.pdf:pdf},
issn = {0018-9162},
journal = {Computer},
number = {10},
pages = {93--110},
title = {{Tutorial Series 13 Computer Memory Systems}},
volume = {14},
year = {1981}
}
@book{Jacob2008,
address = {Burlington, MA},
author = {Jacob, Bruce and Ng, Spencer W. and Wang, David T.},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Jacob, Ng, Wang/Memory Systems - Cache, DRAM, Disk/Jacob, Ng, Wang - 2008 - Memory Systems - Cache, DRAM, Disk.pdf:pdf},
isbn = {9780123797513},
pages = {998},
publisher = {Morgan Kaufmann Publishers},
title = {{Memory Systems - Cache, DRAM, Disk}},
year = {2008}
}
@article{Hsu1997,
author = {Hsu, Shang-te and Chang, Ruei-chuan and Science, Information},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Hsu, Chang, Science/Continuous Checkpointing Joining the Checkpointing with Virtual Memory Paging/Hsu, Chang, Science - 1997 - Continuous Checkpointing Joining the Checkpointing with Virtual Memory Paging.pdf:pdf},
journal = {Software - Practice and Experience},
keywords = {fault tolerance,incremental checkpoint,memory paging},
number = {9},
pages = {1103--1120},
title = {{Continuous Checkpointing : Joining the Checkpointing with Virtual Memory Paging}},
volume = {27},
year = {1997}
}
@incollection{Blanchet2012,
abstract = {Virtual memory is a management technique that relies on the combined use of the main memory and a mass storage unit. This chapter describes virtual memory management concepts, rules and access rights. During the execution of a program, the processor generates virtual addresses that are sent to the memory management module. For the purpose of making it easier to understand the mechanisms, the chapter discusses the example of a machine equipped with 256 words of physical memory organized in 16 word pages, or 16 pages of 16 words and a mass storage unit with 1,024 words, or 64 pages of 16 words, set aside for the user's needs. To illustrate the mechanisms of two‐level paging used in virtual memory management systems, the chapter then presents an example of the practical implementation of the memory management modules. It finally provides another example to describe the concept of paged segmentation.},
address = {Hoboken, NJ},
author = {Blanchet, Gerard and Bertrand, Dupouy},
booktitle = {Computer Architecture},
chapter = {9},
doi = {10.1002/9781118577431.ch9},
isbn = {9781848214293},
pages = {175--204},
publisher = {John Wiley \& Sons},
title = {{Virtual Memory}},
url = {http://ecu.summon.serialssolutions.com/2.0.0/link/0/eLvHCXMwzV3NS8MwFA-i4EFF50edKPSiB6W1TbY2PXgY8wvUk1Nkl9IuCRvonF130L\_eJK\_L1hVEbx56CITk0YT3fi\_vvd9DiGDXcxZ0QkgFZyTFNJEII0kjQZtp2kz9JAglYKXM5GZq7mjT4rPysv5fD34BEavhMfZmz6\_AN1D0aThrzcUIjNf9Kk-5DwGIGwiSZ0VdPcD},
year = {2012}
}
@article{VanWezenbeek1993,
author = {{Van Wezenbeek}, Anton M. and {Jan Withagen}, Willem J.},
doi = {10.1016/0165-6074(93)90254-I},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Van Wezenbeek, Jan Withagen/A survey of memory management/Van Wezenbeek, Jan Withagen - 1993 - A survey of memory management.pdf:pdf},
issn = {01656074},
journal = {Microprocessing and Microprogramming},
number = {3},
pages = {141--162},
title = {{A survey of memory management}},
volume = {36},
year = {1993}
}
@book{Mitchell2010,
address = {Indianapolis},
author = {Mitchell, Scott},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Mitchell/Sams Teach Yourself ASP.NET 4 in 24 Hours Complete Starter Kit/Mitchell - 2010 - Sams Teach Yourself ASP.NET 4 in 24 Hours Complete Starter Kit.pdf:pdf},
isbn = {9780672333057},
publisher = {Sams Publishing},
title = {{Sams Teach Yourself ASP.NET 4 in 24 Hours: Complete Starter Kit}},
year = {2010}
}
@article{Doran1976,
abstract = {"Virtual memory" is a computing term which has come into increasing use in recent years. Unfortunately, like other new expressions, its use often causes controversy and misunderstanding, for it is used to mean different things by different people. Not long ago when one major computer vendor announced the introduction of the new technique of 'virtual storage,' other manufacturers complained that they had been doing the same thing for years under a different name (see Figure 1).},
author = {Doran, R W},
doi = {10.1109/C-M.1976.218408},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Doran/Virtual Memory/Doran - 1976 - Virtual Memory.pdf:pdf},
journal = {Computer},
number = {10},
pages = {27--37},
title = {{Virtual Memory}},
url = {http://ecu.summon.serialssolutions.com.ezproxy.ecu.edu.au/\#!/search?bookMark=ePnHCXMwbZ09C8IwEIaLOPiB\_gPBwU2q-WrTzkVx6aauR9ok4CKiFfz53iXaqUsp9E3Icr03JPfcLFkYupt970INl00iToezcl-l9Y5j-tuFbUUxIpJpRnxkrsbhf0mhl4vJ\_xBAYSqZJsvr7UmlFOuarp6ic7ocD-fqlP56BaQtQcxSJZ},
volume = {9},
year = {1976}
}
@book{Silberschatz2014,
author = {Silberschatz, Abraham and Galvin, Peter Baer and Gagne, Greg},
edition = {2nd},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Silberschatz, Galvin, Gagne/Operating System Concepts Essentials/Silberschatz, Galvin, Gagne - 2013 - Operating System Concepts Essentials.pdf:pdf},
isbn = {9781118804926},
publisher = {Wiley},
title = {{Operating System Concepts Essentials}},
year = {2013}
}
@book{Gorman2004,
author = {Gorman, Mel},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Gorman/Understanding the Linux Virtual Memory Manager/Gorman - 2004 - Understanding the Linux Virtual Memory Manager.pdf:pdf},
isbn = {9780131453487},
pages = {748},
publisher = {Prentice Hall},
title = {{Understanding the Linux Virtual Memory Manager}},
year = {2004}
}
@book{Negnevitsky2005,
author = {Negnevitsky, Michael},
edition = {2nd},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Negnevitsky/Artificial Intelligence - A Guide To Intelligent Systems/Negnevitsky - 2005 - Artificial Intelligence - A Guide To Intelligent Systems.pdf:pdf},
isbn = {0321204662},
pmid = {7374720},
publisher = {Addison Wesley},
title = {{Artificial Intelligence - A Guide To Intelligent Systems}},
year = {2005}
}
@inproceedings{Potier1977,
address = {New York},
author = {Potier, Dominique},
booktitle = {SOSP '77 Proceedings of the sixth ACM symposium on Operating systems principles},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Potier/Analysis of demand paging policies with swapped working sets/Potier - 1977 - Analysis of demand paging policies with swapped working sets.pdf:pdf},
keywords = {and phrases,demand paging algorithms,paging algorithms,program behaviour,queueing network,semi-markov model,swapping,virtual memory,working-set memory management},
pages = {125--131},
title = {{Analysis of demand paging policies with swapped working sets}},
year = {1977}
}
@book{Schwalbe2013,
author = {Schwalbe, Kathy},
edition = {7th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Schwalbe/Information Technology Project Management/Schwalbe - 2012 - Information Technology Project Management.pdf:pdf},
isbn = {9781133526858},
publisher = {Cengage Learning},
title = {{Information Technology Project Management}},
year = {2012}
}
@book{Walther2008,
author = {Walther, Stephen},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Walther/ASP.NET 3.5 Unleashed/Walther - 2008 - ASP.NET 3.5 Unleashed.pdf:pdf},
isbn = {9780672330117},
publisher = {Sams Publishing},
title = {{ASP.NET 3.5 Unleashed}},
year = {2008}
}
@article{Stonebraker1984,
author = {Stonebraker, Michael},
doi = {10.1145/850755.850757},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Stonebraker/Virtual Memory Transaction Management/Stonebraker - 1984 - Virtual Memory Transaction Management.pdf:pdf},
issn = {0163-5980},
journal = {ACM SIGOPS Operating Systems Review},
number = {2},
pages = {8--16},
title = {{Virtual Memory Transaction Management}},
url = {http://doi.acm.org.ezproxy.ecu.edu.au/10.1145/850755.850757},
volume = {18},
year = {1984}
}
@misc{Ravenbrook2015,
booktitle = {Ravenbrook Ltd.},
title = {{Memory Management Reference 4.0 documentation}},
url = {http://www.memorymanagement.org/mmref/begin.html},
urldate = {2015-07-31},
year = {2015}
}
@article{Wilkes2001,
abstract = {First Page of the Article},
author = {Wilkes, M. V.},
doi = {10.1109/TC.2001.966488},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilkes/High performance memory systems/Wilkes - 2001 - High performance memory systems.pdf:pdf},
issn = {00189340},
journal = {IEEE Transactions on Computers},
number = {11},
pages = {1105},
title = {{High performance memory systems}},
volume = {50},
year = {2001}
}
@book{Silberschatz2012,
author = {Silberschatz, Abraham and Galvin, Peter Baer and Gagne, Greg},
edition = {9th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Silberschatz, Galvin, Gagne/Operating Systeme Concepts/Silberschatz, Galvin, Gagne - 2012 - Operating Systeme Concepts.pdf:pdf},
isbn = {9781118063330},
publisher = {Wiley},
title = {{Operating Systeme Concepts}},
year = {2012}
}
@book{Simon2011,
author = {Simon, Phil},
edition = {Revised},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Simon/Why New Systems Fail/Simon - 2011 - Why New Systems Fail.pdf:pdf},
isbn = {9781435456440},
publisher = {Cengage Learning},
title = {{Why New Systems Fail}},
year = {2011}
}
@book{Walther2002,
author = {Walther, Stephen},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Walther/ASP.NET Unleashed/Walther - 2002 - ASP.NET Unleashed.pdf:pdf},
isbn = {0672320681},
publisher = {Sams Publishing},
title = {{ASP.NET Unleashed}},
year = {2002}
}
@article{Pinto1990,
abstract = {A study was conducted of 97 projects identified as failures by the
projects' managers or parent organizations. Using the project
implementation profile, a set of managerially controllable factors is
identified as associated with project failure. The factors differed
according to three contingency variables: the precise way in which
failure was defined; the type of project, and the stage of the project
in its life cycle. Implications for project management and for future
research on failed projects are discussed. The results demonstrated
empirical justification for a multidimensional construct of project
failure, encompassing both internal efficiency and external
effectiveness aspects. The fact that the critical factors associated
with failure depended on the way in which failure is defined suggests
that it is necessary to know considerably more about how project
managers define failure (and success) and, indeed how the parent
organization makes judgments on the matter},
author = {Pinto, Jeffrey K. and Mantel, Samuel J.},
doi = {10.1109/17.62322},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Pinto, Mantel/The causes of project failure/Pinto, Mantel - 1990 - The causes of project failure.pdf:pdf},
isbn = {0018-9391},
issn = {00189391},
journal = {IEEE Transactions on Engineering Management},
number = {4},
pages = {269--276},
title = {{The causes of project failure}},
volume = {37},
year = {1990}
}
@techreport{Wilson1992,
author = {Wilson, Paul R},
booktitle = {Memory Management},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson/Uniprocessor Garbage Collection Techniques/Wilson - 1992 - Uniprocessor Garbage Collection Techniques.pdf:pdf},
pages = {1--42},
title = {{Uniprocessor Garbage Collection Techniques}},
year = {1992}
}
@inproceedings{IWMM95,
author = {Hartmanis, J and Leeuwen, J Van and Brauer, W and Gries, D and Stoer, J},
booktitle = {International Workshop IWMM 95 Kinross, UK, September 27-29, 1995 Proceedings},
doi = {10.1007/3-540-60368-9},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Hartmanis et al/Memory Management/Hartmanis et al. - 1995 - Memory Management.pdf:pdf},
isbn = {978-3-540-60368-9},
title = {{Memory Management}},
url = {http://link.springer.com/10.1007/3-540-60368-9},
volume = {986},
year = {1995}
}
@article{Rosene1967,
abstract = {In multiprocessor systems it is desirable to look for and allocate storage without extensive data moving. Two techniques for accomplishing this, associative memory techniques and indirect addressing techniques, are described. It is concluded that the two methods are similar in performance, but that indirect addressing is more economical. An indirect addressing method is described in detail and various methods of implementation compared. The memory overhead and the time penalty (in memory accesses) are given as a function of memory size and method of implementation. It is concluded that a computed address table look-up technique should be used and that the block size should be either 256 or 512 words.},
author = {Rosene, A. Frederick},
doi = {10.1109/PGEC.1967.264774},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Rosene/Memory Allocation for Multiprocessors/Rosene - 1967 - Memory Allocation for Multiprocessors.pdf:pdf},
issn = {0367-7508},
journal = {IEEE Transactions on Electronic Computers},
keywords = {Associative memory,computed address,dynamic storage allocation,indirect address table,ltimultiprocessor,memory allocation,tree structure},
number = {5},
pages = {659--665},
title = {{Memory Allocation for Multiprocessors}},
volume = {EC-16},
year = {1967}
}
@book{Eberhart2007,
abstract = {Russ Eberhart and Yuhui Shi have succeeded in integrating various natural and engineering disciplines to establish Computational Intelligence. This is the first comprehensive textbook, including lots of practical examples. -Shun-ichi Amari, RIKEN Brain Science Institute, JapanThis book is an excellent choice on its own, but, as in my case, will form the foundation for our advanced graduate courses in the CI disciplines. -James M. Keller, University of Missouri-ColumbiaThe excellent new book by Eberhart and Shi asserts that computational intelligence rests on a foundation of evolutionary computation. This refreshing view has set the book apart from other books on computational intelligence. The book has an emphasis on practical applications and computational tools, which are very useful and important for further development of the computational intelligence field. -Xin Yao, The Centre of Excellence for Research in Computational Intelligence and Applications, BirminghamThe soft analytic tools that comprise the field of computational intelligence have matured to the extent that they can, often in powerful combination with one another, form the foundation for a variety of solutions suitable for use by domain experts without extensive programming experience.Computational Intelligence: Concepts to Implementations provides the conceptual and practical knowledge necessary to develop solutions of this kind. Focusing on evolutionary computation, neural networks, and fuzzy logic, the authors have constructed an approach to thinking about and working with computational intelligence that has, in their extensive experience, proved highly effective. Features Moves clearly and efficiently from concepts and paradigms to algorithms and implementation techniques by focusing, in the early chapters, on the specific concepts and paradigms that inform the authors' methodologies. Explores a number of key themes, including self-organization, complex adaptive systems, and emergent computation. Details the metrics and analytical tools needed to assess the performance of computational intelligence tools. Concludes with a series of case studies that illustrate a wide range of successful applications. Presents code examples in C and C++. Provides, at the end of each chapter, review questions and exercises suitable for graduate students, as well as researchers and practitioners engaged in self-study. Makes available, on a companion website, a number of software implementations that can be adapted for real-world applications. Moves clearly and efficiently from concepts and paradigms to algorithms and implementation techniques by focusing, in the early chapters, on the specific concepts and paradigms that inform the authors' methodologies. Explores a number of key themes, including self-organization, complex adaptive systems, and emergent computation. Details the metrics and analytical tools needed to assess the performance of computational intelligence tools. Concludes with a series of case studies that illustrate a wide range of successful applications. Presents code examples in C and C++. Provides, at the end of each chapter, review questions and exercises suitable for graduate students, as well as researchers and practitioners engaged in self-study. Makes available, on a companion website, a number of software implementations that can be adapted for real-world applications.},
author = {Eberhart, Russell C. and Shi, Yuhui},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Eberhart, Shi/Computational Intelligence Concepts to Implementations/Eberhart, Shi - 2007 - Computational Intelligence Concepts to Implementations.pdf:pdf},
isbn = {9781558607590},
publisher = {Elsevier},
title = {{Computational Intelligence: Concepts to Implementations}},
year = {2007}
}
@article{Kolanski2008,
abstract = {We present an extension to classical separation logic which allows reasoning about virtual memory. Our logic is formalised in the Isabelle/HOL theorem prover in a manner allowing classical separation logic notation to be used at an abstract level. We demonstrate that in the common cases, such as user applications, our logic reduces to classical separation logic. At the same time we can express properties about page tables, direct physical memory access, virtual memory access, and shared memory in detail. ?? 2008 Elsevier B.V. All rights reserved.},
author = {Kolanski, Rafal},
doi = {10.1016/j.entcs.2008.06.042},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Kolanski/A Logic for Virtual Memory/Kolanski - 2008 - A Logic for Virtual Memory.pdf:pdf},
issn = {15710661},
journal = {Electronic Notes in Theoretical Computer Science},
keywords = {Interactive Theorem Proving,Separation Logic,Virtual Memory},
number = {C},
pages = {61--77},
publisher = {Elsevier B.V.},
title = {{A Logic for Virtual Memory}},
url = {http://dx.doi.org/10.1016/j.entcs.2008.06.042},
volume = {217},
year = {2008}
}
@inproceedings{Karcanaj2015,
author = {Karcanaj, Helidon and Banushi, Mario and Tafa, Igli and Fejzaj, Julian and Saatciu, Denis},
booktitle = {2015 Fifth International Conference on Advanced Computing \& Communication Technologies},
doi = {10.1109/ACCT.2015.96},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Karcanaj et al/Virtual Memory Behavior around Physical and Virtual System Limits/Karcanaj et al. - 2015 - Virtual Memory Behavior around Physical and Virtual System Limits.pdf:pdf},
isbn = {978-1-4799-8488-6},
keywords = {- paging,page fault,redis,thrashing,tirana university tirana university,virtual memory},
pages = {261--265},
title = {{Virtual Memory Behavior around Physical and Virtual System Limits}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7079090},
year = {2015}
}
@article{McNutt1996,
abstract = {Detailed instructions on configuring swap space on Solaris 2.4 and HP-UX 10.0 are provided.; Detailed instructions on configuring swap space on Solaris 2.4 and HP-UX 10.0 are provided.},
author = {McNutt, Dinah},
doi = {0742-3136},
journal = {Performance Computing / Unix Review},
number = {3},
pages = {77--80},
title = {{Configuring swap space}},
url = {http://ecu.summon.serialssolutions.com.ezproxy.ecu.edu.au/\#!/search?bookMark=ePnHCXMwbV3BCsIwDPXgRcGrFxEFjzJYu1i7syh-gPdQu3YIIuIq-vnmbe4iHkvSXkqTR5OXNx5MHHqzb6nlcFXDdgwmBuOhTNj3XihjR4MpSG2XuqXjLZuXuy\_lEQEmng770-6YfdUAsrokypTkfXLQO4SkJJ1zX6gq5iY4qkwM3nonSz},
volume = {14},
year = {1996}
}
@misc{Micros,
author = {Microsoft},
title = {{Memory Management (Windows)}},
url = {https://msdn.microsoft.com/en-us/library/aa366779(VS.85).aspx},
urldate = {2015-07-31}
}
@article{Oikawa2014,
author = {Oikawa, Shuichi},
doi = {10.1186/2193-1801-3-494},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Oikawa/Non-Volatile Memory Management Methods for Non-Volatile Main Memory based on File Systems/Oikawa - 2014 - Non-Volatile Memory Management Methods for Non-Volatile Main Memory based on File Systems.pdf:pdf},
journal = {SpringerPlus},
keywords = {file systems,memory,memory management,non-volatile,nv,operating systems},
number = {494},
pages = {1--8},
title = {{Non-Volatile Memory Management Methods for Non-Volatile Main Memory based on File Systems}},
volume = {3},
year = {2014}
}
@misc{ShieldsHistoryOfOS,
author = {Shields, Dave},
title = {{A Brief History of Operating Systems | The Wayward Word Press on WordPress.com}},
url = {http://daveshields.me/presentations/a-brief-history-of-operating-systems/},
urldate = {2015-07-27}
}
@incollection{Jacob2008,
abstract = {Virtual memory is one technique for managing the resource of physical memory, including the caches, main memory, and disk subsystem. It provides software with the illusion of a very large amount of main memory. The basic function of virtual memory is to create a virtual-machine environment for every process, which among other things allows text, data, and stack regions to begin at statically known locations in all processes without fear of conflict. It is the primary client of the memory system, in that a user process is not aware of physical memory and does not access it directly. Different architectures provide support for operating system features in very different ways. One of the fundamental differences is their treatment of address spaces. The chapter presents a taxonomy describing the architectural organization and protection of an address space. A system's interrupt mechanism, memory map, and page table/TLB combinations comprise the heart of a typical virtual memory system, one of the most fundamental services that a modern operating system provides. It highlights the operating system's use of and response to precise interrupts, arguably the fundamental building block of today's multi-tasking systems. This chapter presents a definition for a base in-order pipeline and then adds support for nested interrupts and virtual memory management via a MIPS-like memory map, page table, and TLB.},
address = {Burlington, MA},
author = {Jacob, Bruce and Ng, Spencer W. and Wang, David T. and Rodriguez, Samuel},
booktitle = {Memory Systems - Cache, DRAM, Disk},
chapter = {31},
doi = {10.1016/B978-012379751-3.50033-3},
file = {:C$\backslash$:/Users/marty/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Jacob et al. - 2008 - Memory Systems.pdf:pdf},
isbn = {9780123797513},
pages = {883--920},
publisher = {Morgan Kaufmann Publishers},
title = {{Virtual Memory}},
url = {http://www.sciencedirect.com/science/article/pii/B9780123797513500333},
year = {2008}
}
@article{Kwon2010,
author = {Kwon, Ohhoon and Koh, Kern},
doi = {10.1109/TCE.2010.5606292},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Kwon, Koh/Swap Space Management Technique for Portable Consumer Electronics with NAND Flash Memory/Kwon, Koh - 2010 - Swap Space Management Technique for Portable Consumer Electronics with NAND Flash Memory.pdf:pdf},
journal = {IEEE Transactions on Consumer Electronics},
number = {3},
pages = {1524--1531},
title = {{Swap Space Management Technique for Portable Consumer Electronics with NAND Flash Memory}},
volume = {56},
year = {2010}
}
@book{McConnell2004,
address = {Redmond},
author = {McConnell, Steve},
edition = {2nd},
file = {:E$\backslash$:/Documents/eBooks/mendeley/McConnell/Code Complete A Practical Handbook of Software Construction/McConnell - 2004 - Code Complete A Practical Handbook of Software Construction.pdf:pdf},
isbn = {0735619670},
publisher = {Microsoft Press},
title = {{Code Complete: A Practical Handbook of Software Construction}},
year = {2004}
}
@article{Azriel2014,
author = {Azriel, Leonid and Mendelson, Avi and Weiser, Uri},
doi = {10.1109/LCA.2014.2319077},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Azriel, Mendelson, Weiser/Peripheral Memory a Technique for Fighting Memory Bandwidth Bottleneck/Azriel, Mendelson, Weiser - 2014 - Peripheral Memory a Technique for Fighting Memory Bandwidth Bottleneck.pdf:pdf},
issn = {1556-6056},
journal = {IEEE Computer Architecture Letters},
number = {1},
pages = {54--57},
title = {{Peripheral Memory: a Technique for Fighting Memory Bandwidth Bottleneck}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6803056},
volume = {14},
year = {2014}
}
@book{Tanendbaum2009,
abstract = {For software development professionals and computer science students, Modern Operating Systems gives a solid conceptual overview of operating system design, including detailed case studies of Unix/Linux and Windows 2000. Readers familiar with Tanenbaum's previous text, Operating Systems, know the author is a great proponent of simple design and hands-on experimentation. His earlier book came bundled with the source code for an operating system called Minux, a simple variant of Unix and the platform used by Linus Torvalds to develop Linux. Although this book does not come with any source code, he illustrates many of his points with code fragments (C, usually with Unix system calls). The first half of Modern Operating Systems focuses on traditional operating systems concepts: processes, deadlocks, memory management, I/O, and file systems. There is nothing ground-breaking in these early chapters, but all topics are well covered, each including sections on current research and a set of student problems. It is the second half of the book that differentiates itself from older operating systems texts. Here, each chapter describes an element of what constitutes a modern operating system-awareness of multimedia applications, multiple processors, computer networks, and a high level of security. The chapter on multimedia functionality focuses on such features as handling massive files and providing video-on-demand. Included in the discussion on multiprocessor platforms are clustered computers and distributed computing. Finally, the importance of security is discussed-a lively enumeration of the scores of ways operating systems can be vulnerable to attack, from password security to computer viruses and Internet worms. Included at the end of the book are case studies of two popular operating systems: Unix/Linux and Windows 2000. There is a bias toward the Unix/Linux approach, not surprising given the author's experience and academic bent, but this bias does not detract from Tanenbaum's analysis. Both operating systems are dissected, describing how each implements processes, file systems, memory management, and other operating system fundamentals. Tanenbaum's mantra is a simple, accessible operating system design. Given that modern operating systems have extensive features, he is forced to reconcile physical size with simplicity. Towards this end, he makes frequent references to the Frederick Brooks classic The Mythical Man Month for wisdom on managing large, complex software development projects. He finds both Windows 2000 and Unix/Linux guilty of being too complicated-with a particular skewering of Windows 2000 and its "mammoth Win32 API". A primary culprit is the attempt to make operating systems more "user-friendly," which Tanenbaum views as an excuse for bloated code. The solution is to have smart people, the smallest possible team, and well-defined interactions between various operating systems components. Future operating system design will benefit if the advice in this book is taken to heart. -Pete Ostenson - Dieser Text bezieht sich auf eine vergriffene oder nicht verf\"{u}gbare Ausgabe dieses Titels.},
archivePrefix = {arXiv},
arxivId = {0710.2023},
author = {Tanendbaum, Andrew S.},
doi = {10.1142/S0129183108012261},
edition = {3rd},
eprint = {0710.2023},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Tanendbaum/Modern Operating Systems/Tanendbaum - 2009 - Modern Operating Systems.pdf:pdf},
isbn = {0130313580},
issn = {13541013},
pages = {1104},
pmid = {12204814},
publisher = {Pearson Education},
title = {{Modern Operating Systems}},
url = {http://www.amazon.com/dp/0136006639},
year = {2009}
}
@book{Russell2010,
abstract = {The long-anticipated revision of this best-selling book offers the most comprehensive, up-to-date introduction to the theory and practice of artificial intelligence. Intelligent Agents. Solving Problems by Searching. Informed Search Methods. Game Playing. Agents that Reason Logically. First-order Logic. Building a Knowledge Base. Inference in First-Order Logic. Logical Reasoning Systems. Practical Planning. Planning and Acting. Uncertainty. Probabilistic Reasoning Systems. Making Simple Decisions. Making Complex Decisions. Learning from Observations. Learning with Neural Networks. Reinforcement Learning. Knowledge in Learning. Agents that Communicate. Practical Communication in English. Perception. Robotics. For those interested in artificial intelligence.},
author = {Russell, Jonathan Stuart and Norvig, Peter},
edition = {3rd},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Russell, Norvig/Artificial Intelligence A Modern Approach/Russell, Norvig - 2010 - Artificial Intelligence A Modern Approach.pdf:pdf},
isbn = {9780136042594},
keywords = {Artificial intelligence,Programming,ai,ai learning machine textbook,artificial-intelligence,artificial-intelligence knowledge-representation m,juergen,local search,planning,scheduling,search space},
publisher = {Prentice Hall},
title = {{Artificial Intelligence: A Modern Approach}},
year = {2010}
}
@article{Johansson1979,
abstract = {This article describes a simple way by which a microcomputer system can be made to use virtual addressing of a memory which is organised on two levels. Consideration has been given to the fact that the system must at all times be able to serve interrupts very quickly. The system is also capable of diagnosing itself and modifying the implementation of the virtual memory.},
author = {Johansson, Lars-\AA ke},
doi = {10.1016/0303-1268(79)90142-1},
file = {:C$\backslash$:/Users/marty/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Johansson - 1979 - Virtual memory management for microcomputers in real-time applications(2).pdf:pdf},
issn = {03031268},
journal = {Euromicro Newsletter},
month = jul,
number = {4},
pages = {235--238},
title = {{Virtual memory management for microcomputers in real-time applications}},
url = {http://www.sciencedirect.com/science/article/pii/0303126879901421},
volume = {5},
year = {1979}
}
@article{Fiat1991,
abstract = {The paging problem is that of deciding which pages to keep in a memory of k pages in order to minimize the number of page faults. This paper introduces the marking algorithm, a simple randomized on-line algorithm for the paging problem, and gives a proof that its performance guarantee (competitive ratio) is O(log k). In contrast, no deterministic on-line algorithm can have a performance guarantee better than k.},
author = {Fiat, Amos and Karp, Richard and Luby, Mike and McGeoch, Lyle and Sleator, Daniel and Young, Neal E.},
doi = {10.1016/0196-6774(91)90041-V},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Fiat et al/Competitive Paging Algorithms/Fiat et al. - 1991 - Competitive Paging Algorithms.pdf:pdf},
journal = {Journal of Algorithms},
number = {4},
pages = {685--699},
title = {{Competitive Paging Algorithms}},
volume = {12},
year = {1991}
}
@book{Kliem2012,
abstract = {Ethics plays a critical role in project management, but all too often, its importance is overlooked. This benign neglect can result in serious consequences to individuals and organizations, ranging from tarnished reputations to civil and criminal liability. Ethics and Project Management demonstrates the importance of making ethics a key consideration in managing projects and describes the impacts that occur when ethical transgressions arise.Providing the tools necessary for project managers to avoid an ethical lapse that can put themselves and their organization at risk, this volume:Defines ethics and places it within the project management contextDiscusses the contents of the Project Management Institute’s code of ethicsEnables project managers to recognize the trends that precipitate ethical dilemmas on a projectDemonstrates how ethical concerns permeate the entire project life cycleProvides tips on establishing a governance protocol to ensure ethical complianceExplores legal issues that arise from unethical behaviorExamines how ethical concerns on a project can have global implications, and how to operate in international settings with cultural differencesEach chapter ends with a Getting Started Checklist, facilitating immediate application of the concepts discussed and making it easy for project managers to determine whether they are in compliance with ethical standards. Providing a solid roadmap for the ethical health of a project, this volume is essential reading for all those concerned with avoiding the disastrous consequences of a cavalier approach to ethics.Praise for the book:... a great desktop reference for any project manager. It is a must-have title to complete any project management library and I recommend it to both new and highly experienced project managers.—Gregg D. Richie, PMP, MCTS, CNP, Managing Principal, P8, LLC},
author = {Kliem, Ralph L.},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Kliem/Ethics and Project Management/Kliem - 2012 - Ethics and Project Management.pdf:pdf},
isbn = {9781439852620},
publisher = {CRC Press},
title = {{Ethics and Project Management}},
year = {2012}
}
@article{Jacob1998,
abstract = {Los autores introducen tecnolog\'{\i}as b\'{a}sicas de memoria virtual y luego comparar los dise\~{n}os de administraci\'{o}n de memoria en tres microarquitecturas comerciales. Ellos muestran la diversidad de soporte de memoria virtual y, por implicaci\'{o}n, c\'{o}mo esta diversidad puede complicar y operaciones del sistema de concesiones. Bruce},
author = {Jacob, Bruce and Mudge, Trevor},
doi = {10.1109/2.683005},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Jacob, Mudge/Virtual Memory Issues of Implementation/Jacob, Mudge - 1998 - Virtual Memory Issues of Implementation.pdf:pdf},
issn = {00189162},
journal = {Computer},
number = {6},
pages = {33--43},
title = {{Virtual Memory: Issues of Implementation}},
url = {http://www.computer.org/csdl/mags/co/1998/06/r6033.pdf},
volume = {31},
year = {1998}
}
@article{Nawrocki1983,
author = {Nawrocki, Jerzy R.},
doi = {10.1016/0020-0190(83)90069-8},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Nawrocki/Contiguous Segmentation with Limited Compacting/Nawrocki - 1983 - Contiguous Segmentation with Limited Compacting.pdf:pdf},
journal = {Information Processing Letters},
pages = {57--62},
title = {{Contiguous Segmentation with Limited Compacting}},
volume = {17},
year = {1983}
}
@misc{Bartlett2004,
author = {Bartlett, Jonathan},
booktitle = {IBM (16th November)},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Bartlett/Inside Memory Management The choices, tradeoffs, and implementations of dynamic allocation/Bartlett - 2004 - Inside Memory Management The choices, tradeoffs, and implementations of dynamic allocation.pdf:pdf},
pages = {1--23},
title = {{Inside Memory Management: The choices, tradeoffs, and implementations of dynamic allocation}},
url = {http://www.ibm.com/developerworks/linux/library/l-memory/},
urldate = {2015-07-31},
year = {2004}
}
@article{Greenberg1981,
author = {Greenberg, Bob},
doi = {10.1145/1041583.1041589},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Greenberg/Microsoft memory management document/Greenberg - 1981 - Microsoft memory management document.pdf:pdf},
issn = {01635816},
journal = {ACM SIGPC Notes},
number = {1-2},
pages = {34--41},
title = {{Microsoft memory management document}},
volume = {4},
year = {1981}
}
@misc{CreationOfUnix,
title = {{The Creation of the UNIX Operating System: An Overview of the UNIX* Operating System}},
url = {http://web.archive.org/web/20070707183617/http://www.bell-labs.com/history/unix/tutorial.html},
urldate = {2015-07-27},
year = {2007}
}
@article{Lim2013,
author = {Lim, Geunsik and Member, Student and Min, Changwoo and Eom, Young Ik},
doi = {10.1109/TCE.2013.6689690},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Lim et al/Virtual Memory Partitioning for Enhancing Application Performance in Mobile Platforms/Lim et al. - 2013 - Virtual Memory Partitioning for Enhancing Application Performance in Mobile Platforms.pdf:pdf},
journal = {IEEE Transactions on Consumer Electronics},
number = {4},
pages = {786--794},
title = {{Virtual Memory Partitioning for Enhancing Application Performance in Mobile Platforms}},
volume = {59},
year = {2013}
}
@book{Abran2010,
author = {Abran, Alain},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Abran/Software Metrics And Software Maintenance/Abran - 2010 - Software Metrics And Software Maintenance.pdf:pdf},
isbn = {9780470597200},
pmid = {148},
publisher = {IEEE Computer Society},
title = {{Software Metrics And Software Maintenance}},
year = {2010}
}
@inproceedings{Babaoglu1981,
address = {New York},
author = {Babaoglu, \"{O}zalp and Joy, William},
booktitle = {SOSP '81 Proceedings of the eighth ACM symposium on Operating systems principles},
doi = {10.1145/800216.806595},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Babaoglu, Joy/Converting a swap-based system to do paging in an architecture lacking page-referenced bits/Babaoglu, Joy - 1981 - Converting a swap-based system to do paging in an architecture lacking page-referenced bits.pdf:pdf},
isbn = {0-89791-062-1},
issn = {01635980},
number = {5},
pages = {78--86},
title = {{Converting a swap-based system to do paging in an architecture lacking page-referenced bits}},
volume = {15},
year = {1981}
}
@book{Blunden2003,
abstract = {Acknowledgments Publishing a book is an extended process that involves a number of people.Writing the final manuscript is just a small part of the big picture. This section is dedicated to all the people who directly, and indirectly, lent me their help. First and foremost, I would like to thank Jim Hill ofWordware Publishing for giving me the opportunity to write a book and believ- ing in me. I would also like to extend thanks toWes Beckwith and Beth Kohler.Wes, in addition to offering constant encouragement, does a great job of putting up with my e-mails and handling the vari- ous packages that I send. Beth Kohler, who performed the incredible task of reading my first book forWordware in a matter of days, has also been invaluable. I first spoke with Barry Brey back in the mid-1990s when I became interested in protected mode programming. He has always taken the time to answer my questions and offer his insight. Barry wrote the first book on the Intel chip set back in 1984. Since then, he has written well over 20 books. His current textbook on Intel’s IA32 processors is in its sixth edition. This is why I knew I had to ask Barry to be the technical editor for this book. Thanks, Barry. “Look, our middleware even runs on that littleWindows NT piece of crap.” —George Matkovitz “Hey, who was the \%\&\^{}\$ son of a \&*\$\# who wrote this optimized load of . . . oh, it was me.” —Mike Adler Mike Adler and George Matkovitz are two old fogeys who worked at Control Data back when Seymour Cray kicked the tar out of IBM. George helped to implement the world’s first message-passing operating system at Control Data. Mike also worked on a number of groundbreaking system software projects. I met these two codgers while performing R\&D for an ERP vendor in the Midwest. I hadn’t noticed how much these engineers had influenced me until I left Minnesota for California. It was almost as though I had learned through osmosis. A lot of my core understanding of software and the computer industry in general is based on the bits of hard-won advice and lore that these gentlemen passed on to me. I distinctly remember walking into Mike’s office and asking him, “Hey Mike, how do you build an operating system?” I would also like to thank Frank Merat, a senior professor at Case Western Reserve University. Frank has consistently shown interest in my work and has offered his support whenever he could. There is no better proving ground for a book than an established research university. Finally, I would like to thank SonicWALL, Inc. for laying me off and giving me the opportunity to sit around and think. The days I spent huddled with my computers were very productive.},
author = {Blunden, Bill},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Blunden/Memory Management Algorithms and Implementation in CC/Blunden - 2003 - Memory Management Algorithms and Implementation in CC.pdf:pdf},
isbn = {1556223471},
pages = {391},
publisher = {Wordware},
title = {{Memory Management Algorithms and Implementation in C/C++}},
year = {2003}
}
@article{Milenkovic1990,
abstract = {This tutorial describes the current crop of commercial memory management units (MMUs) for 32-bit microprocessors. The discussion includes both complex- and reduced-instruction-set computers (CISCs and RISCs). The rationale, principles, and issues related to hardware support for memory management and virtual memory are reviewed. The design and features of high-end microprocessor MMUs are reviewed and compared with respect to a common set of criteria. Special attention is paid to Unix requirements and multiprocessor, multiple MMU considerations. The MMUs covered are Intel 80386, i486, and i860; Motorola's 68851 (MMU for the 68020), 68030, 68040, and 88200 (MMU for the 88000 series); the Fujitsu MB86920 (Sparc MMU); and the MIPS R2000/R3000},
author = {Milenkovic, M.},
doi = {10.1109/40.52948},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Milenkovic/Microprocessor memory management units/Milenkovic - 1990 - Microprocessor memory management units.pdf:pdf},
issn = {0272-1732},
journal = {IEEE Micro},
number = {2},
pages = {70--85},
title = {{Microprocessor memory management units}},
volume = {10},
year = {1990}
}
@book{PMBOK2013,
author = {{Project Management Institute}},
edition = {5th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Project Management Institute/A Guide to the Project Management Body of Knowledge (PMBOK Guide)/Project Management Institute - 2013 - A Guide to the Project Management Body of Knowledge (PMBOK Guide).pdf:pdf},
isbn = {9781935589679},
publisher = {Project Management Institute},
title = {{A Guide to the Project Management Body of Knowledge (PMBOK Guide)}},
year = {2013}
}
@misc{Mendham2005,
abstract = {PM Solutions Research first surveyed organizations about their Project Portfolio Management (PPM) practices in 2003. A decade later, we’ve taken another look at a phenomenon that is changing the way organizations are managed and narrowing the gap between project/program management and corporate leadership. Our findings are encouraging and, at the same time, indicate those areas that organizations need to focus on to optimize the value of PPM. We had 495 respondents to this survey.},
author = {Mendham, Tim},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Mendham/The State of Project Management - CIO/Mendham - 2005 - The State of Project Management - CIO.pdf:pdf},
title = {{The State of Project Management - CIO}},
url = {http://www.cio.com.au/article/143117/state\_project\_management/?fp=4\&fpid=21},
urldate = {2015-07-29},
year = {2005}
}
@article{Wilson1992,
abstract = {Pointer swizzling at page fault time is a novel address translation mechanism that exploits conventional address translation hardware. It can support huge address spaces efficiently without long hardware addresses; such large address spaces are attractive for persistent object stores, distributed shared memories, and shared address space operating systems. This swizzling scheme can be used to provide data compatibility across machines with different word sizes, and even to provide binary code compatibility across machines with different hardware address sizes. Pointers are translated (`swizzled') from a long format to a shorter hardware-supported format at page fault time. No extra hardware is required, and no continual software overhead is incurred by presence checks or indirection of pointers. This pagewise technique exploits temporal and spatial locality in much the same way as a normal virtual memory; this gives it many desirable performance characteristics, especially given the trend toward larger main memories. It is easy to implement using common compilers and operating systems},
author = {Wilson, Paul R. and Kakkad, S.V.},
doi = {10.1109/IWOOOS.1992.252959},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Wilson, Kakkad/Pointer swizzling at page fault time efficiently and compatibly supporting huge address spaces on standard hardware/Wilson, Kakkad - 1992 - Pointer swizzling at page fault time efficiently and compatibly su.pdf:pdf},
isbn = {0-8186-3015-9},
journal = {Proceedings of the Second International Workshop on Object Orientation in Operating Systems},
title = {{Pointer swizzling at page fault time: efficiently and compatibly supporting huge address spaces on standard hardware}},
year = {1992}
}
@inproceedings{Rajwar2005,
abstract = {Writing concurrent programs is difficult because of the complexity of ensuring proper synchronization. Conventional lock-based synchronization suffers from well-known limitations, so researchers have considered nonblocking transactions as an alternative. Recent hardware proposals have demonstrated how transactions can achieve high performance while not suffering limitations of lock-based mechanisms. However, current hardware proposals require programmers to be aware of platform-specific resource limitations such as buffer sizes, scheduling quanta, as well as events such as page faults, and process migrations. If the transactional model is to gain wide acceptance, hardware support for transactions must be virtualized to hide these limitations in much the same way that virtual memory shields the programmer from platform-specific limitations of physical memory. This paper proposes virtual transactional memory (VTM), a user-transparent system that shields the programmer from various platform-specific resource limitations. VTM maintains the performance advantage of hardware transactions, incurs low overhead in time, and has modest costs in hardware support. While many system-level challenges remain, VTM takes a step toward making transactional models more widely acceptable.},
author = {Rajwar, Ravi and Herlihy, Maurice and Lai, Konrad},
booktitle = {ISCA '05 Proceedings of the 32nd annual international symposium on Computer Architecture},
doi = {10.1109/ISCA.2005.54},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Rajwar, Herlihy, Lai/Virtualizing Transactional Memory/Rajwar, Herlihy, Lai - 2005 - Virtualizing Transactional Memory.pdf:pdf},
isbn = {076952270X},
issn = {10636897},
pages = {494--505},
title = {{Virtualizing Transactional Memory}},
year = {2005}
}
@misc{Microsoft2013,
author = {Microsoft},
title = {{A history of Windows - Microsoft Windows}},
url = {http://windows.microsoft.com/en-US/windows/history\#T1=era0},
urldate = {2015-07-27},
year = {2013}
}
@article{Denning1975,
author = {Denning, Peter J. and Graham, G. Scott},
doi = {10.1109/PROC.1975.9857},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Denning, Graham/Multiprogrammed Memory Management/Denning, Graham - 1975 - Multiprogrammed Memory Management.pdf:pdf},
journal = {Proceedings of the IEEE},
number = {6},
pages = {924--939},
title = {{Multiprogrammed Memory Management}},
volume = {63},
year = {1975}
}
@article{Alanko1983,
author = {Alanko, Timo O. and Verkamo, A. Inkeri},
doi = {10.1016/0167-7136(83)90150-6},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Alanko, Verkamo/Segmentation, paging and optimal page sizes in virtual memory/Alanko, Verkamo - 1983 - Segmentation, paging and optimal page sizes in virtual memory.pdf:pdf},
issn = {01677136},
journal = {Performance Evaluation},
keywords = {alanko was born in,finland,gram behaviour,he received the m,helsinki,in 1941,locality,page size,pro-,sc,segmentation,timo o,virtual memory},
number = {1},
pages = {13--33},
title = {{Segmentation, paging and optimal page sizes in virtual memory}},
volume = {3},
year = {1983}
}
@book{Kerzner2009,
abstract = {Project management has evolved from a management philosophy restricted to a few functional areas and regarded as something nice to have to an enterprise pro- ject management system affecting every functional unit of the company. Simply stated, project management has evolved into a business process rather than merely a project management process. More and more companies are now regarding project management as being mandatory for the survival of the firm. Organizations that were opponents of project management are now advocates. Management educators of the past, who preached that project management could not work and would be just another fad, are now staunch supporters. Project man- agement is here to stay. Colleges and universities are now offering graduate degrees in project management. The text discusses the principles of project management. Students who are interested in advanced topics, such as some of the material in Chapters 21 to 24 of this text, may wish to read one of my other texts, Advanced Project Management: Best Practices in Implementation (Hoboken, NJ: Wiley, 2004), and Project Management Best Practices: Achieving Global Excellence (Hoboken, NJ: Wiley, 2006). John Wiley \& Sons will also be introducing a five-book series on project management best practices, co-authored by Frank Saladis and Harold Kerzner, to accompany the above two books.},
author = {Kerzner, Harold},
edition = {10th},
file = {:E$\backslash$:/Documents/eBooks/mendeley/Kerzner/Project Management A Systems Approach To Planning, Scheduling, and Controlling/Kerzner - 2009 - Project Management A Systems Approach To Planning, Scheduling, and Controlling.pdf:pdf},
isbn = {9780470278703},
pages = {1094},
publisher = {Wiley},
title = {{Project Management: A Systems Approach To Planning, Scheduling, and Controlling}},
url = {http://books.google.com/books?hl=en\&lr=\&id=QgQQC5qRtzgC\&oi=fnd\&pg=PT18\&dq=Project+Management+A+SYSTEMS+APPROACH+TO+PLANNING,+SCHEDULING,+AND+CONTROLLING\&ots=C-xCmnG1MQ\&sig=bK0-57PodokJlrHPIsNW3IOnJcY$\backslash$nhttp://books.google.com/books?hl=en\&lr=\&id=QgQQC5qRtzg},
year = {2009}
}
@article{Pietrek1995,
author = {Pietrek, Matt},
doi = {ISSN: 0889-9932},
journal = {Microsoft Systems Journal},
number = {4},
pages = {19+},
title = {{Understanding Windows 95 memory management: paging, address spaces and contexts}},
url = {http://ecu.summon.serialssolutions.com.ezproxy.ecu.edu.au/\#!/search?bookMark=ePnHCXMw42LgTQStzc4rAe\_hSmEBt-IsdYH1oBEHfMMisF7gZAgIRd6\_oRAO7ITmlxcrWJoq5IJWmVYq5MJXgFgpFIAv7dFRAOZHUD9UAZjfgBkJyM9LUQCt6gYWZcXcDLJuriHOHrqgwjUeFEMlRYnJ8YZmwDreyBh0\_zF-eQBakDqT},
volume = {10},
year = {1995}
}
